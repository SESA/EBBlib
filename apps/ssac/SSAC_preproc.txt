# 1 "../apps/ssac/ssac.c"
# 1 "/Users/jamescadden/workspace/sesa/EBBlib/BUILD//"
# 1 "<built-in>"
#define __STDC__ 1
#define __STDC_VERSION__ 199901L
#define __STDC_HOSTED__ 1
#define __GNUC__ 4
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 1
#define __APPLE_CC__ 5658
#define __llvm__ 1
#define __SIZE_TYPE__ long unsigned int
#define __PTRDIFF_TYPE__ long int
#define __WCHAR_TYPE__ int
#define __WINT_TYPE__ int
#define __INTMAX_TYPE__ long int
#define __UINTMAX_TYPE__ long unsigned int
#define __GXX_ABI_VERSION 1002
#define __SCHAR_MAX__ 127
#define __SHRT_MAX__ 32767
#define __INT_MAX__ 2147483647
#define __LONG_MAX__ 9223372036854775807L
#define __LONG_LONG_MAX__ 9223372036854775807LL
#define __WCHAR_MAX__ 2147483647
#define __CHAR_BIT__ 8
#define __INTMAX_MAX__ 9223372036854775807L
#define __FLT_EVAL_METHOD__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_MAX__ 3.40282347e+38F
#define __FLT_MIN__ 1.17549435e-38F
#define __FLT_EPSILON__ 1.19209290e-7F
#define __FLT_DENORM_MIN__ 1.40129846e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_MAX__ 1.7976931348623157e+308
#define __DBL_MIN__ 2.2250738585072014e-308
#define __DBL_EPSILON__ 2.2204460492503131e-16
#define __DBL_DENORM_MIN__ 4.9406564584124654e-324
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 64
#define __LDBL_DIG__ 18
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 21
#define __LDBL_MAX__ 1.18973149535723176502e+4932L
#define __LDBL_MIN__ 3.36210314311209350626e-4932L
#define __LDBL_EPSILON__ 1.08420217248550443401e-19L
#define __LDBL_DENORM_MIN__ 3.64519953188247460253e-4951L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-95)
#define __DEC32_MAX_EXP__ 96
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_DEN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-383)
#define __DEC64_MAX_EXP__ 384
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_DEN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6143)
#define __DEC128_MAX_EXP__ 6144
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_DEN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ _
#define __VERSION__ "4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.9.00)"
#define __GNUC_STDC_INLINE__ 1
#define _LP64 1
#define __LP64__ 1
#define __BLOCKS__ 1
#define __OPTIMIZE__ 1
#define __FINITE_MATH_ONLY__ 0
#define __pic__ 2
#define __PIC__ 2
#define __SSP__ 1
#define __amd64 1
#define __amd64__ 1
#define __x86_64 1
#define __x86_64__ 1
#define __tune_core2__ 1
#define __MMX__ 1
#define __SSE__ 1
#define __SSE2__ 1
#define __SSE3__ 1
#define __SSE_MATH__ 1
#define __SSE2_MATH__ 1
#define __k8 1
#define __k8__ 1
#define __NO_MATH_INLINES 1
#define __LITTLE_ENDIAN__ 1
#define __MACH__ 1
#define __APPLE__ 1
#define __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ 1073
#define __CONSTANT_CFSTRINGS__ 1
#define __strong 
#define __weak __attribute__((objc_gc(weak)))
#define __block __attribute__((__blocks__(byref)))
#define OBJC_NEW_PROPERTIES 1
# 1 "<command-line>"
#define __DYNAMIC__ 1
#define HAVE_CONFIG_H 1
# 1 "../apps/ssac/ssac.c"
# 23 "../apps/ssac/ssac.c"
# 1 "./config.h" 1




#define ARCH_AMD64 1
# 20 "./config.h"
#define HAVE_ARPA_INET_H 1


#define HAVE_FCNTL_H 1


#define HAVE_INTMAX_T 1


#define HAVE_INTPTR_T 1


#define HAVE_INTTYPES_H 1


#define HAVE_LONG_LONG_INT 1


#define HAVE_MEMORY_H 1


#define HAVE_NETDB_H 1


#define HAVE_NETINET_IN_H 1


#define HAVE_STDINT_H 1


#define HAVE_STDLIB_H 1


#define HAVE_STRINGS_H 1


#define HAVE_STRING_H 1


#define HAVE_SYS_SOCKET_H 1


#define HAVE_SYS_STAT_H 1


#define HAVE_SYS_TYPES_H 1


#define HAVE_UINTMAX_T 1


#define HAVE_UINTPTR_T 1


#define HAVE_UNISTD_H 1


#define HAVE_UNSIGNED_LONG_LONG_INT 1





#define LRT_ULNX 1





#define PACKAGE "ebblib"


#define PACKAGE_BUGREPORT "sesa-developers@googlegroups.com"


#define PACKAGE_NAME "EBBLib"


#define PACKAGE_STRING "EBBLib 0.1"


#define PACKAGE_TARNAME "ebblib"


#define PACKAGE_URL ""


#define PACKAGE_VERSION "0.1"


#define STDC_HEADERS 1


#define VERSION "0.1"
# 24 "../apps/ssac/ssac.c" 2
# 1 "/usr/include/stdint.h" 1 3 4






#define _STDINT_H_ 


#define __WORDSIZE 64
# 19 "/usr/include/stdint.h" 3 4
#define _INT8_T 
typedef signed char int8_t;



#define _INT16_T 
typedef short int16_t;



#define _INT32_T 
typedef int int32_t;



#define _INT64_T 
typedef long long int64_t;



#define _UINT8_T 
typedef unsigned char uint8_t;



#define _UINT16_T 
typedef unsigned short uint16_t;



#define _UINT32_T 
typedef unsigned int uint32_t;



#define _UINT64_T 
typedef unsigned long long uint64_t;



typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;





#define _INTPTR_T 
typedef long intptr_t;



#define _UINTPTR_T 
typedef unsigned long uintptr_t;





#define _INTMAX_T 

typedef long int intmax_t;






#define _UINTMAX_T 

typedef long unsigned int uintmax_t;
# 119 "/usr/include/stdint.h" 3 4
#define INT8_MAX 127
#define INT16_MAX 32767
#define INT32_MAX 2147483647
#define INT64_MAX 9223372036854775807LL

#define INT8_MIN -128
#define INT16_MIN -32768






#define INT32_MIN (-INT32_MAX-1)
#define INT64_MIN (-INT64_MAX-1)

#define UINT8_MAX 255
#define UINT16_MAX 65535
#define UINT32_MAX 4294967295U
#define UINT64_MAX 18446744073709551615ULL


#define INT_LEAST8_MIN INT8_MIN
#define INT_LEAST16_MIN INT16_MIN
#define INT_LEAST32_MIN INT32_MIN
#define INT_LEAST64_MIN INT64_MIN

#define INT_LEAST8_MAX INT8_MAX
#define INT_LEAST16_MAX INT16_MAX
#define INT_LEAST32_MAX INT32_MAX
#define INT_LEAST64_MAX INT64_MAX

#define UINT_LEAST8_MAX UINT8_MAX
#define UINT_LEAST16_MAX UINT16_MAX
#define UINT_LEAST32_MAX UINT32_MAX
#define UINT_LEAST64_MAX UINT64_MAX


#define INT_FAST8_MIN INT8_MIN
#define INT_FAST16_MIN INT16_MIN
#define INT_FAST32_MIN INT32_MIN
#define INT_FAST64_MIN INT64_MIN

#define INT_FAST8_MAX INT8_MAX
#define INT_FAST16_MAX INT16_MAX
#define INT_FAST32_MAX INT32_MAX
#define INT_FAST64_MAX INT64_MAX

#define UINT_FAST8_MAX UINT8_MAX
#define UINT_FAST16_MAX UINT16_MAX
#define UINT_FAST32_MAX UINT32_MAX
#define UINT_FAST64_MAX UINT64_MAX




#define INTPTR_MIN INT64_MIN
#define INTPTR_MAX INT64_MAX






#define UINTPTR_MAX UINT64_MAX





#define INTMAX_MIN INT64_MIN
#define INTMAX_MAX INT64_MAX

#define UINTMAX_MAX UINT64_MAX



#define PTRDIFF_MIN INT64_MIN
#define PTRDIFF_MAX INT64_MAX
# 208 "/usr/include/stdint.h" 3 4
#define SIZE_MAX UINT64_MAX






#define WCHAR_MAX __WCHAR_MAX__
# 229 "/usr/include/stdint.h" 3 4
#define WCHAR_MIN (-WCHAR_MAX-1)



#define WINT_MIN INT32_MIN
#define WINT_MAX INT32_MAX

#define SIG_ATOMIC_MIN INT32_MIN
#define SIG_ATOMIC_MAX INT32_MAX


#define INT8_C(v) (v)
#define INT16_C(v) (v)
#define INT32_C(v) (v)
#define INT64_C(v) (v ## LL)

#define UINT8_C(v) (v ## U)
#define UINT16_C(v) (v ## U)
#define UINT32_C(v) (v ## U)
#define UINT64_C(v) (v ## ULL)

#define INTMAX_C(v) (v ## LL)
#define UINTMAX_C(v) (v ## ULL)
# 25 "../apps/ssac/ssac.c" 2

# 1 "../l0/cobj/CObjEBB.h" 1

#define __COBJ_EBB_H__ 
# 25 "../l0/cobj/CObjEBB.h"
extern EBBRC CObjEBBMissFunc(EBBRep **, EBBLTrans *, FuncNum, EBBMissArg);

#define COBJ_EBBCALL(id,method,...) (EBBId_DREF(id)->ft->method(EBBId_DREF(id), ##__VA_ARGS__))



#define COBJ_EBBType(TYPE) CObject(TYPE) { CObjInterface(TYPE) *ft; }; typedef TYPE ## Ref *TYPE ## Id; CObjInterface(TYPE)







#define COBJ_EBBFuncTbl(TYPE) CObjInterface(TYPE) *ft;
# 27 "../apps/ssac/ssac.c" 2
# 1 "../l0/cobj/CObjEBBUtils.h" 1

#define __COBJ_EBB_UTILS_H__ 
# 25 "../l0/cobj/CObjEBBUtils.h"
static inline EBBRC
CObjEBBBind(EBBId id, void *root)
{
  return EBBBindPrimId(id, CObjEBBMissFunc, (EBBMissArg) root);
}

extern EBBRC CObjEBBBindBoot(EBBId id, void *root);
# 28 "../apps/ssac/ssac.c" 2
# 1 "../l0/cobj/CObjEBBRoot.h" 1

#define __COBJ_EBB_ROOT_H_ 
# 25 "../l0/cobj/CObjEBBRoot.h"
CObject(CObjEBBRoot) { CObjInterface(CObjEBBRoot) *ft; }; typedef CObjEBBRootRef *CObjEBBRootId; CObjInterface(CObjEBBRoot)
{
  EBBRC (*handleMiss)(CObjEBBRootRef self, EBBRep **obj,
        EBBLTrans *lt, FuncNum fnum);
};
# 29 "../apps/ssac/ssac.c" 2
# 1 "../l0/cobj/CObjEBBRootMulti.h" 1

#define __COBJ_EBB_ROOT_MULTI_H__ 
# 25 "../l0/cobj/CObjEBBRootMulti.h"
CObject(CObjEBBRootMulti) {
  CObjInterface(CObjEBBRootMulti) *ft;
};

typedef EBBRep *(*CreateRepFunc) (CObjEBBRootMultiRef _self);
typedef struct RepListNode_s RepListNode;

CObjInterface(CObjEBBRootMulti)
{
  CObjImplements(CObjEBBRoot);
  void (*addRepOn)(CObjEBBRootMultiRef _self, uintptr_t el, EBBRep *rep);
  RepListNode *(*nextRep) (CObjEBBRootMultiRef _self,
      RepListNode *curr, EBBRep **rep);
};
# 30 "../apps/ssac/ssac.c" 2
# 1 "../l0/cobj/CObjEBBRootMultiImp.h" 1

#define __COBJ_EBB_ROOT_MULTI_IMP_H__ 
# 30 "../l0/cobj/CObjEBBRootMultiImp.h"
CObject(CObjEBBRootMultiImp) {
  CObjInterface(CObjEBBRootMulti) *ft;
  CreateRepFunc createRep;
  RepListNode *head;
  uintptr_t lock;
};

extern EBBRC CObjEBBRootMultiImpStaticInit(CObjEBBRootMultiImpRef o, CreateRepFunc func);
extern EBBRC CObjEBBRootMultiImpCreate(CObjEBBRootMultiImpRef *o, CreateRepFunc func);
# 31 "../apps/ssac/ssac.c" 2
# 1 "../l0/cobj/cobj.h" 1

#define __C_OBJ_H__ 
# 36 "../l0/cobj/cobj.h"
#define CObjIfName(name) name ## _if
#define CObjInterface(name) struct CObjIfName(name)
#define CObjImplements(name) CObjInterface(name) CObjIfName(name)

#define CObject(name) typedef struct name ## _obj name; typedef name * name ## Ref; struct name ## _obj




#define CObjectDefine(name) struct name ## _obj
# 59 "../l0/cobj/cobj.h"
#define ContainingCOPtr(addr,ctype,field) ((ctype *)(((uintptr_t)addr) - (__builtin_offsetof(ctype, field))))
# 32 "../apps/ssac/ssac.c" 2

# 1 "../l0/EBBMgrPrim.h" 1

#define __EBBMGRPRIM_H__ 
# 24 "../l0/EBBMgrPrim.h"
typedef struct EBBMgrPrim_obj EBBMgrPrim; typedef EBBMgrPrim * EBBMgrPrimRef; struct EBBMgrPrim_obj { struct EBBMgrPrim_if *ft; }; typedef EBBMgrPrimRef *EBBMgrPrimId; struct EBBMgrPrim_if {
  EBBRC (*AllocId) (EBBMgrPrimRef _self, EBBId *id);
  EBBRC (*FreeId) (EBBMgrPrimRef _self, EBBId id);
  EBBRC (*BindId) (EBBMgrPrimRef _self, EBBId id, EBBMissFunc mf,
     EBBMissArg arg);
  EBBRC (*UnBindId) (EBBMgrPrimRef _self, EBBId id, EBBMissFunc *mf,
       EBBMissArg *arg);
};
extern EBBMgrPrimId theEBBMgrPrimId;

extern EBBRC EBBMgrPrimInit(void);

static inline EBBRC
EBBAllocPrimId(EBBId *id)
{
  return (EBBId_DREF(theEBBMgrPrimId)->ft->AllocId(EBBId_DREF(theEBBMgrPrimId), id));
}

static inline EBBRC
EBBBindPrimId(EBBId id, EBBMissFunc mf, EBBMissArg arg)
{
  return (EBBId_DREF(theEBBMgrPrimId)->ft->BindId(EBBId_DREF(theEBBMgrPrimId), id, mf, arg));
}

extern EBBRC EBBDestroyPrimId(EBBId id);
# 34 "../apps/ssac/ssac.c" 2
# 1 "../l0/EventMgrPrim.h" 1

#define __EVENTMGR_H__ 
# 48 "../l0/EventMgrPrim.h"
typedef struct EventHandler_obj EventHandler; typedef EventHandler * EventHandlerRef; struct EventHandler_obj { struct EventHandler_if *ft; }; typedef EventHandlerRef *EventHandlerId; struct EventHandler_if {
  EBBRC (*handleEvent) (EventHandlerRef _self);
  EBBRC (*init) (EventHandlerRef _self, uintptr_t extra);
};
# 62 "../l0/EventMgrPrim.h"
# 1 "../l0/lrt/pic.h" 1

#define __LRT_PIC_H__ 
# 26 "../l0/lrt/pic.h"
# 1 "../l0/lrt/ulnx/pic.h" 1

#define __LRT_ULNX_PIC_H__ 
# 25 "../l0/lrt/ulnx/pic.h"
enum {LRT_PIC_LG2MAX_PICS = 7};
enum {LRT_PIC_MAX_PICS = (1 << LRT_PIC_LG2MAX_PICS) };
enum {LRT_PIC_MAX_PIC_ID = (LRT_PIC_MAX_PICS-1)};


typedef uintptr_t lrt_pic_id;
typedef uint64_t lrt_pic_set[LRT_PIC_MAX_PICS/64];

inline static void
lrt_pic_set_copy(lrt_pic_set src, lrt_pic_set dest)
{
  uintptr_t i;
  for (i=0; i<(sizeof(lrt_pic_set)/sizeof(uint64_t)); i++)
    dest[i]=src[i];
}

inline static void
lrt_pic_set_clear(lrt_pic_set s)
{
  uintptr_t i;
  for (i=0; i<(sizeof(lrt_pic_set)/sizeof(uint64_t)); i++)
    s[i]=0;
}

inline static void
lrt_pic_set_add(lrt_pic_set s, lrt_pic_id i)
{
  if (i>LRT_PIC_MAX_PIC_ID) return;
  uint64_t mask = (uint64_t)1 << (i%64);
  s[i/64] |= mask;
}

inline static void
lrt_pic_set_remove(lrt_pic_set s, lrt_pic_id i)
{
  if (i>LRT_PIC_MAX_PIC_ID) return;
  uint64_t mask = ~((uint64_t)1 << (i%64));
  s[i/64] &= mask;
}

inline static uintptr_t
lrt_pic_set_test(lrt_pic_set s, lrt_pic_id i)
{
  if (i>LRT_PIC_MAX_PIC_ID) return 0;
  uint64_t mask = (uint64_t)1 << (i%64);
  return ((s[i/64] & mask) != 0);
}

inline static void
lrt_pic_set_addall(lrt_pic_set s)
{
  uintptr_t i;
  for (i=0; i<(sizeof(lrt_pic_set)/sizeof(uint64_t)); i++)
    s[i]=-1;
}

typedef void (*lrt_pic_handler)(void);
typedef uintptr_t lrt_pic_src;


# 1 "/usr/include/pthread.h" 1 3 4
# 53 "/usr/include/pthread.h" 3 4
#define _PTHREAD_H 

# 1 "/usr/include/_types.h" 1 3 4
# 25 "/usr/include/_types.h" 3 4
#define __TYPES_H_ 

# 1 "/usr/include/sys/_types.h" 1 3 4
# 30 "/usr/include/sys/_types.h" 3 4
#define _SYS__TYPES_H_ 

# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 68 "/usr/include/sys/cdefs.h" 3 4
#define _CDEFS_H_ 





#define __BEGIN_DECLS 
#define __END_DECLS 
# 86 "/usr/include/sys/cdefs.h" 3 4
#define __P(protos) protos
#define __CONCAT(x,y) x ## y
#define __STRING(x) #x

#define __const const
#define __signed signed
#define __volatile volatile
# 140 "/usr/include/sys/cdefs.h" 3 4
#define __dead2 __attribute__((__noreturn__))
#define __pure2 __attribute__((__const__))



#define __unused __attribute__((__unused__))
# 158 "/usr/include/sys/cdefs.h" 3 4
#define __dead 
#define __pure 
# 168 "/usr/include/sys/cdefs.h" 3 4
#define __used __attribute__((__used__))
# 183 "/usr/include/sys/cdefs.h" 3 4
#define __restrict restrict
# 196 "/usr/include/sys/cdefs.h" 3 4
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))

#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))






#define __IDSTRING(name,string) static const char name[] __used = string


#define __COPYRIGHT(s) __IDSTRING(copyright,s)



#define __RCSID(s) __IDSTRING(rcsid,s)



#define __SCCSID(s) __IDSTRING(sccsid,s)



#define __PROJECT_VERSION(s) __IDSTRING(project_version,s)
# 262 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_ONLY_64_BIT_INO_T 0

#define __DARWIN_ONLY_VERS_1050 0
# 286 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_ONLY_UNIX_CONFORMANCE 1
# 297 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_UNIX03 1
# 333 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_64_BIT_INO_T 1
# 344 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_VERS_1050 1




#define __DARWIN_NON_CANCELABLE 0







#define __DARWIN_SUF_UNIX03 
# 366 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_SUF_64_BIT_INO_T "$INODE64"
# 376 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_SUF_1050 "$1050"
# 385 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_SUF_NON_CANCELABLE 
# 395 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"




#define __DARWIN_ALIAS(sym) __asm("_" __STRING(sym) __DARWIN_SUF_UNIX03)
#define __DARWIN_ALIAS_C(sym) __asm("_" __STRING(sym) __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03)
#define __DARWIN_ALIAS_I(sym) __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03)
#define __DARWIN_INODE64(sym) __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T)

#define __DARWIN_1050(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050)
#define __DARWIN_1050ALIAS(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_UNIX03)
#define __DARWIN_1050ALIAS_C(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03)
#define __DARWIN_1050ALIAS_I(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03)
#define __DARWIN_1050INODE64(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T)

#define __DARWIN_EXTSN(sym) __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN)
#define __DARWIN_EXTSN_C(sym) __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN __DARWIN_SUF_NON_CANCELABLE)




# 1 "/usr/include/sys/_symbol_aliasing.h" 1 3 4
# 35 "/usr/include/sys/_symbol_aliasing.h" 3 4
#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_2(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_2(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_2(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_3(x) 



#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_0(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_1(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_2(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_3(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_4(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_5(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_6(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_7(x) x
# 418 "/usr/include/sys/cdefs.h" 2 3 4




#define __DARWIN_ALIAS_STARTING(_mac,_iphone,x) __DARWIN_ALIAS_STARTING_MAC_ ##_mac(x)
# 486 "/usr/include/sys/cdefs.h" 3 4
#define __deprecated __attribute__((deprecated))
#define __unavailable __attribute__((unavailable))






# 1 "/usr/include/sys/_posix_availability.h" 1 3 4
# 35 "/usr/include/sys/_posix_availability.h" 3 4
#define ___POSIX_C_DEPRECATED_STARTING_198808L 





#define ___POSIX_C_DEPRECATED_STARTING_199009L 





#define ___POSIX_C_DEPRECATED_STARTING_199209L 





#define ___POSIX_C_DEPRECATED_STARTING_199309L 





#define ___POSIX_C_DEPRECATED_STARTING_199506L 





#define ___POSIX_C_DEPRECATED_STARTING_200112L 





#define ___POSIX_C_DEPRECATED_STARTING_200809L 
# 495 "/usr/include/sys/cdefs.h" 2 3 4

#define __POSIX_C_DEPRECATED(ver) ___POSIX_C_DEPRECATED_STARTING_ ##ver







#define __DARWIN_C_ANSI 010000L
#define __DARWIN_C_FULL 900000L






#define __DARWIN_C_LEVEL __DARWIN_C_FULL
# 521 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_NO_LONG_LONG (defined(__STRICT_ANSI__) && (__STDC_VERSION__-0 < 199901L) && !defined(__GNUG__))
# 536 "/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_LDBL_COMPAT(x) 
#define __DARWIN_LDBL_COMPAT2(x) 
#define __DARWIN_LONG_DOUBLE_IS_DOUBLE 0
# 552 "/usr/include/sys/cdefs.h" 3 4
#define _DARWIN_FEATURE_64_BIT_INODE 1
# 586 "/usr/include/sys/cdefs.h" 3 4
#define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1







#define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
# 604 "/usr/include/sys/cdefs.h" 3 4
#define __CAST_AWAY_QUALIFIER(variable,qualifier,type) (type) (long)(variable)
# 33 "/usr/include/sys/_types.h" 2 3 4
# 1 "/usr/include/machine/_types.h" 1 3 4
# 29 "/usr/include/machine/_types.h" 3 4
#define _BSD_MACHINE__TYPES_H_ 


# 1 "/usr/include/i386/_types.h" 1 3 4
# 29 "/usr/include/i386/_types.h" 3 4
#define _BSD_I386__TYPES_H_ 







typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
# 70 "/usr/include/i386/_types.h" 3 4
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;


typedef long int __darwin_ptrdiff_t;





typedef long unsigned int __darwin_size_t;





typedef __builtin_va_list __darwin_va_list;





typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
# 33 "/usr/include/machine/_types.h" 2 3 4
# 34 "/usr/include/sys/_types.h" 2 3 4



#define __PTHREAD_SIZE__ 1168
#define __PTHREAD_ATTR_SIZE__ 56
#define __PTHREAD_MUTEXATTR_SIZE__ 8
#define __PTHREAD_MUTEX_SIZE__ 56
#define __PTHREAD_CONDATTR_SIZE__ 8
#define __PTHREAD_COND_SIZE__ 40
#define __PTHREAD_ONCE_SIZE__ 8
#define __PTHREAD_RWLOCK_SIZE__ 192
#define __PTHREAD_RWLOCKATTR_SIZE__ 16
# 58 "/usr/include/sys/_types.h" 3 4
struct __darwin_pthread_handler_rec
{
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};
struct _opaque_pthread_attr_t { long __sig; char __opaque[56]; };
struct _opaque_pthread_cond_t { long __sig; char __opaque[40]; };
struct _opaque_pthread_condattr_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_mutex_t { long __sig; char __opaque[56]; };
struct _opaque_pthread_mutexattr_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_once_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_rwlock_t { long __sig; char __opaque[192]; };
struct _opaque_pthread_rwlockattr_t { long __sig; char __opaque[16]; };
struct _opaque_pthread_t { long __sig; struct __darwin_pthread_handler_rec *__cleanup_stack; char __opaque[1168]; };
# 91 "/usr/include/sys/_types.h" 3 4
#define __DARWIN_NULL ((void *)0)


typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;

typedef __darwin_ino64_t __darwin_ino_t;



typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef struct _opaque_pthread_attr_t
   __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t
   __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t
   __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t
   __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t
   __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t
   __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t
   __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t
   __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t
   *__darwin_pthread_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];
# 28 "/usr/include/_types.h" 2 3 4


#define __strfmonlike(fmtarg,firstvararg) __attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))

#define __strftimelike(fmtarg) __attribute__((__format__ (__strftime__, fmtarg, 0)))






typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;

typedef __uint32_t __darwin_wctype_t;





#define __DARWIN_WCHAR_MAX __WCHAR_MAX__





#define __DARWIN_WCHAR_MIN (-0x7fffffff - 1)



#define __DARWIN_WEOF ((__darwin_wint_t)-1)





#define _FORTIFY_SOURCE 2
# 56 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/pthread_impl.h" 1 3 4
# 25 "/usr/include/pthread_impl.h" 3 4
#define _PTHREAD_IMPL_H_ 
# 37 "/usr/include/pthread_impl.h" 3 4
#define _PTHREAD_MUTEX_SIG_init 0x32AAABA7

#define _PTHREAD_ERRORCHECK_MUTEX_SIG_init 0x32AAABA1
#define _PTHREAD_RECURSIVE_MUTEX_SIG_init 0x32AAABA2
#define _PTHREAD_FIRSTFIT_MUTEX_SIG_init 0x32AAABA3

#define _PTHREAD_COND_SIG_init 0x3CB0B1BB
#define _PTHREAD_ONCE_SIG_init 0x30B1BCBA
#define _PTHREAD_RWLOCK_SIG_init 0x2DA8B3B4




#define SCHED_OTHER 1
#define SCHED_FIFO 4
#define SCHED_RR 2

#define __SCHED_PARAM_SIZE__ 4
# 58 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/sched.h" 1 3 4
# 25 "/usr/include/sched.h" 3 4
#define _SCHED_H_ 









struct sched_param { int sched_priority; char __opaque[4]; };


extern int sched_yield(void);
extern int sched_get_priority_min(int);
extern int sched_get_priority_max(int);

# 60 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 64 "/usr/include/time.h" 3 4
#define _TIME_H_ 



#define __need_struct_timespec 
# 1 "/usr/include/_structs.h" 1 3 4
# 24 "/usr/include/_structs.h" 3 4
# 1 "/usr/include/sys/_structs.h" 1 3 4
# 85 "/usr/include/sys/_structs.h" 3 4
#undef __need_struct_timespec

#define _STRUCT_TIMESPEC struct timespec
struct timespec
{
 __darwin_time_t tv_sec;
 long tv_nsec;
};
# 25 "/usr/include/_structs.h" 2 3 4
# 70 "/usr/include/time.h" 2 3 4


#define NULL __DARWIN_NULL



#define _CLOCK_T 
typedef __darwin_clock_t clock_t;



#define _SIZE_T 
typedef __darwin_size_t size_t;



#define _TIME_T 
typedef __darwin_time_t time_t;


struct tm {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
 long tm_gmtoff;
 char *tm_zone;
};


#define CLOCKS_PER_SEC 1000000







extern char *tzname[];


extern int getdate_err;

extern long timezone __asm("_" "timezone" );

extern int daylight;


char *asctime(const struct tm *);
clock_t clock(void) __asm("_" "clock" );
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *getdate(const char *);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *) __asm("_" "mktime" );
size_t strftime(char * restrict, size_t, const char * restrict, const struct tm * restrict) __asm("_" "strftime" );
char *strptime(const char * restrict, const char * restrict, struct tm * restrict) __asm("_" "strptime" );
time_t time(time_t *);


void tzset(void);



char *asctime_r(const struct tm * restrict, char * restrict);
char *ctime_r(const time_t *, char *);
struct tm *gmtime_r(const time_t * restrict, struct tm * restrict);
struct tm *localtime_r(const time_t * restrict, struct tm * restrict);


time_t posix2time(time_t);



void tzsetwall(void);
time_t time2posix(time_t);
time_t timelocal(struct tm * const);
time_t timegm(struct tm * const);



int nanosleep(const struct timespec *, struct timespec *) __asm("_" "nanosleep" );


# 61 "/usr/include/pthread.h" 2 3 4


#define _PTHREAD_ATTR_T 
typedef __darwin_pthread_attr_t pthread_attr_t;



#define _PTHREAD_COND_T 
typedef __darwin_pthread_cond_t pthread_cond_t;



#define _PTHREAD_CONDATTR_T 
typedef __darwin_pthread_condattr_t pthread_condattr_t;



#define _PTHREAD_KEY_T 
typedef __darwin_pthread_key_t pthread_key_t;



#define _PTHREAD_MUTEX_T 
typedef __darwin_pthread_mutex_t pthread_mutex_t;



#define _PTHREAD_MUTEXATTR_T 
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;



#define _PTHREAD_ONCE_T 
typedef __darwin_pthread_once_t pthread_once_t;



#define _PTHREAD_RWLOCK_T 
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;



#define _PTHREAD_RWLOCKATTR_T 
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;



#define _PTHREAD_T 
typedef __darwin_pthread_t pthread_t;





#define _MACH_PORT_T 
typedef __darwin_mach_port_t mach_port_t;



#define _SIGSET_T 
typedef __darwin_sigset_t sigset_t;
# 147 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/Availability.h" 1 3 4
# 25 "/usr/include/Availability.h" 3 4
#define __AVAILABILITY__ 
# 119 "/usr/include/Availability.h" 3 4
#define __MAC_10_0 1000
#define __MAC_10_1 1010
#define __MAC_10_2 1020
#define __MAC_10_3 1030
#define __MAC_10_4 1040
#define __MAC_10_5 1050
#define __MAC_10_6 1060
#define __MAC_10_7 1070
#define __MAC_NA 9999

#define __IPHONE_2_0 20000
#define __IPHONE_2_1 20100
#define __IPHONE_2_2 20200
#define __IPHONE_3_0 30000
#define __IPHONE_3_1 30100
#define __IPHONE_3_2 30200
#define __IPHONE_4_0 40000
#define __IPHONE_4_1 40100
#define __IPHONE_4_2 40200
#define __IPHONE_4_3 40300
#define __IPHONE_NA 99999

# 1 "/usr/include/AvailabilityInternal.h" 1 3 4
# 31 "/usr/include/AvailabilityInternal.h" 3 4
#define __AVAILABILITY_INTERNAL__ 
# 49 "/usr/include/AvailabilityInternal.h" 3 4
#define __AVAILABILITY_INTERNAL_DEPRECATED __attribute__((deprecated,visibility("default")))
#define __AVAILABILITY_INTERNAL_UNAVAILABLE __attribute__((unavailable,visibility("default")))
#define __AVAILABILITY_INTERNAL_WEAK_IMPORT __attribute__((weak_import,visibility("default")))
#define __AVAILABILITY_INTERNAL_REGULAR __attribute__((visibility("default")))
# 610 "/usr/include/AvailabilityInternal.h" 3 4
#define __MAC_OS_X_VERSION_MIN_REQUIRED __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__


#define __MAC_OS_X_VERSION_MAX_ALLOWED __MAC_10_7







#define __AVAILABILITY_INTERNAL__MAC_10_7 __AVAILABILITY_INTERNAL_REGULAR






#define __AVAILABILITY_INTERNAL__MAC_10_6 __AVAILABILITY_INTERNAL_REGULAR






#define __AVAILABILITY_INTERNAL__MAC_10_5 __AVAILABILITY_INTERNAL_REGULAR






#define __AVAILABILITY_INTERNAL__MAC_10_4 __AVAILABILITY_INTERNAL_REGULAR






#define __AVAILABILITY_INTERNAL__MAC_10_3 __AVAILABILITY_INTERNAL_REGULAR






#define __AVAILABILITY_INTERNAL__MAC_10_2 __AVAILABILITY_INTERNAL_REGULAR






#define __AVAILABILITY_INTERNAL__MAC_10_1 __AVAILABILITY_INTERNAL_REGULAR






#define __AVAILABILITY_INTERNAL__MAC_10_0 __AVAILABILITY_INTERNAL_REGULAR

#define __AVAILABILITY_INTERNAL__MAC_NA __AVAILABILITY_INTERNAL_UNAVAILABLE

#define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1 __AVAILABILITY_INTERNAL_DEPRECATED




#define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2 __AVAILABILITY_INTERNAL_DEPRECATED





#define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3 __AVAILABILITY_INTERNAL_DEPRECATED






#define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4 __AVAILABILITY_INTERNAL_DEPRECATED







#define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5 __AVAILABILITY_INTERNAL_DEPRECATED
# 719 "/usr/include/AvailabilityInternal.h" 3 4
#define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6 __AVAILABILITY_INTERNAL_DEPRECATED
# 734 "/usr/include/AvailabilityInternal.h" 3 4
#define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7 __AVAILABILITY_INTERNAL_DEPRECATED
#define __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7 __AVAILABILITY_INTERNAL_DEPRECATED
# 750 "/usr/include/AvailabilityInternal.h" 3 4
#define __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA __AVAILABILITY_INTERNAL__MAC_10_0
#define __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA __AVAILABILITY_INTERNAL__MAC_10_1
#define __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA __AVAILABILITY_INTERNAL__MAC_10_2
#define __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA __AVAILABILITY_INTERNAL__MAC_10_3
#define __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA __AVAILABILITY_INTERNAL__MAC_10_4
#define __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA __AVAILABILITY_INTERNAL__MAC_10_5
#define __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA __AVAILABILITY_INTERNAL__MAC_10_6
#define __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA __AVAILABILITY_INTERNAL__MAC_10_7
#define __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA __AVAILABILITY_INTERNAL_UNAVAILABLE
# 142 "/usr/include/Availability.h" 2 3 4
# 150 "/usr/include/Availability.h" 3 4
#define __OSX_AVAILABLE_STARTING(_mac,_iphone) __AVAILABILITY_INTERNAL ##_mac
#define __OSX_AVAILABLE_BUT_DEPRECATED(_macIntro,_macDep,_iphoneIntro,_iphoneDep) __AVAILABILITY_INTERNAL ##_macIntro ##_DEP ##_macDep
# 148 "/usr/include/pthread.h" 2 3 4


# 160 "/usr/include/pthread.h" 3 4
#define pthread_cleanup_push(func,val) { struct __darwin_pthread_handler_rec __handler; pthread_t __self = pthread_self(); __handler.__routine = func; __handler.__arg = val; __handler.__next = __self->__cleanup_stack; __self->__cleanup_stack = &__handler;
# 169 "/usr/include/pthread.h" 3 4
#define pthread_cleanup_pop(execute) __self->__cleanup_stack = __handler.__next; if (execute) (__handler.__routine)(__handler.__arg); }
# 179 "/usr/include/pthread.h" 3 4
#define PTHREAD_CREATE_JOINABLE 1
#define PTHREAD_CREATE_DETACHED 2

#define PTHREAD_INHERIT_SCHED 1
#define PTHREAD_EXPLICIT_SCHED 2

#define PTHREAD_CANCEL_ENABLE 0x01
#define PTHREAD_CANCEL_DISABLE 0x00
#define PTHREAD_CANCEL_DEFERRED 0x02
#define PTHREAD_CANCEL_ASYNCHRONOUS 0x00


#define PTHREAD_CANCELED ((void *) 1)


#define PTHREAD_SCOPE_SYSTEM 1
#define PTHREAD_SCOPE_PROCESS 2


#define PTHREAD_PROCESS_SHARED 1
#define PTHREAD_PROCESS_PRIVATE 2




#define PTHREAD_PRIO_NONE 0
#define PTHREAD_PRIO_INHERIT 1
#define PTHREAD_PRIO_PROTECT 2




#define PTHREAD_MUTEX_NORMAL 0
#define PTHREAD_MUTEX_ERRORCHECK 1
#define PTHREAD_MUTEX_RECURSIVE 2
#define PTHREAD_MUTEX_DEFAULT PTHREAD_MUTEX_NORMAL




#define PTHREAD_RWLOCK_INITIALIZER {_PTHREAD_RWLOCK_SIG_init, {0}}




#define PTHREAD_MUTEX_INITIALIZER {_PTHREAD_MUTEX_SIG_init, {0}}


#define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER {_PTHREAD_ERRORCHECK_MUTEX_SIG_init, {0}}
#define PTHREAD_RECURSIVE_MUTEX_INITIALIZER {_PTHREAD_RECURSIVE_MUTEX_SIG_init, {0}}
# 239 "/usr/include/pthread.h" 3 4
#define PTHREAD_COND_INITIALIZER {_PTHREAD_COND_SIG_init, {0}}





#define PTHREAD_ONCE_INIT {_PTHREAD_ONCE_SIG_init, {0}}




int pthread_atfork(void (*)(void), void (*)(void),
                      void (*)(void));
int pthread_attr_destroy(pthread_attr_t *);
int pthread_attr_getdetachstate(const pthread_attr_t *,
          int *);
int pthread_attr_getguardsize(const pthread_attr_t * restrict,
                                      size_t * restrict);
int pthread_attr_getinheritsched(const pthread_attr_t * restrict,
           int * restrict);
int pthread_attr_getschedparam(const pthread_attr_t * restrict,
                                     struct sched_param * restrict);
int pthread_attr_getschedpolicy(const pthread_attr_t * restrict,
          int * restrict);
int pthread_attr_getscope(const pthread_attr_t * restrict, int * restrict);
int pthread_attr_getstack(const pthread_attr_t * restrict,
                                      void ** restrict, size_t * restrict);
int pthread_attr_getstackaddr(const pthread_attr_t * restrict,
                                      void ** restrict);
int pthread_attr_getstacksize(const pthread_attr_t * restrict,
                                      size_t * restrict);
int pthread_attr_init(pthread_attr_t *);
int pthread_attr_setdetachstate(pthread_attr_t *,
          int );
int pthread_attr_setguardsize(pthread_attr_t *, size_t );
int pthread_attr_setinheritsched(pthread_attr_t *,
           int );
int pthread_attr_setschedparam(pthread_attr_t * restrict,
                                     const struct sched_param * restrict);
int pthread_attr_setschedpolicy(pthread_attr_t *,
          int );
int pthread_attr_setscope(pthread_attr_t *, int);
int pthread_attr_setstack(pthread_attr_t *,
                                      void *, size_t );
int pthread_attr_setstackaddr(pthread_attr_t *,
                                      void *);
int pthread_attr_setstacksize(pthread_attr_t *, size_t );
int pthread_cancel(pthread_t ) __asm("_" "pthread_cancel" );

int pthread_cond_broadcast(pthread_cond_t *);
int pthread_cond_destroy(pthread_cond_t *);
int pthread_cond_init(pthread_cond_t * restrict,
                            const pthread_condattr_t * restrict) __asm("_" "pthread_cond_init" );
int pthread_cond_signal(pthread_cond_t *);
int pthread_cond_timedwait(pthread_cond_t * restrict,
     pthread_mutex_t * restrict,
     const struct timespec * restrict) __asm("_" "pthread_cond_timedwait" );
int pthread_cond_wait(pthread_cond_t * restrict,
       pthread_mutex_t * restrict) __asm("_" "pthread_cond_wait" );
int pthread_condattr_destroy(pthread_condattr_t *);
int pthread_condattr_init(pthread_condattr_t *);
int pthread_condattr_getpshared(const pthread_condattr_t * restrict,
   int * restrict);
int pthread_condattr_setpshared(pthread_condattr_t *,
   int );
int pthread_create(pthread_t * restrict,
                         const pthread_attr_t * restrict,
                         void *(*)(void *),
                         void * restrict);
int pthread_detach(pthread_t );
int pthread_equal(pthread_t ,
   pthread_t );
void pthread_exit(void *) __attribute__((__noreturn__));
int pthread_getconcurrency(void);
int pthread_getschedparam(pthread_t , int * restrict, struct sched_param * restrict);
void *pthread_getspecific(pthread_key_t );
int pthread_join(pthread_t , void **) __asm("_" "pthread_join" );
int pthread_key_create(pthread_key_t *, void (*)(void *));
int pthread_key_delete(pthread_key_t );
int pthread_mutex_destroy(pthread_mutex_t *);
int pthread_mutex_getprioceiling(const pthread_mutex_t * restrict, int * restrict);
int pthread_mutex_init(pthread_mutex_t * restrict, const pthread_mutexattr_t * restrict);
int pthread_mutex_lock(pthread_mutex_t *);
int pthread_mutex_setprioceiling(pthread_mutex_t * restrict, int, int * restrict);
int pthread_mutex_trylock(pthread_mutex_t *);
int pthread_mutex_unlock(pthread_mutex_t *);
int pthread_mutexattr_destroy(pthread_mutexattr_t *) __asm("_" "pthread_mutexattr_destroy" );
int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t * restrict, int * restrict);
int pthread_mutexattr_getprotocol(const pthread_mutexattr_t * restrict, int * restrict);
int pthread_mutexattr_getpshared(const pthread_mutexattr_t * restrict, int * restrict);
int pthread_mutexattr_gettype(const pthread_mutexattr_t * restrict, int * restrict);
int pthread_mutexattr_init(pthread_mutexattr_t *);
int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int);
int pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int);
int pthread_mutexattr_setpshared(pthread_mutexattr_t *, int );
int pthread_mutexattr_settype(pthread_mutexattr_t *, int);
int pthread_once(pthread_once_t *, void (*)(void));
int pthread_rwlock_destroy(pthread_rwlock_t * ) __asm("_" "pthread_rwlock_destroy" );
int pthread_rwlock_init(pthread_rwlock_t * restrict, const pthread_rwlockattr_t * restrict) __asm("_" "pthread_rwlock_init" );
int pthread_rwlock_rdlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_rdlock" );
int pthread_rwlock_tryrdlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_tryrdlock" );
int pthread_rwlock_trywrlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_trywrlock" );
int pthread_rwlock_wrlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_wrlock" );
int pthread_rwlock_unlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_unlock" );
int pthread_rwlockattr_destroy(pthread_rwlockattr_t *);
int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t * restrict,
   int * restrict);
int pthread_rwlockattr_init(pthread_rwlockattr_t *);
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *,
   int );
pthread_t pthread_self(void);

int pthread_setcancelstate(int , int *) __asm("_" "pthread_setcancelstate" );
int pthread_setcanceltype(int , int *) __asm("_" "pthread_setcanceltype" );
int pthread_setconcurrency(int);
int pthread_setschedparam(pthread_t ,
    int ,
                                const struct sched_param *);
int pthread_setspecific(pthread_key_t ,
         const void *);
void pthread_testcancel(void) __asm("_" "pthread_testcancel" );



int pthread_is_threaded_np(void);

int pthread_threadid_np(pthread_t,__uint64_t*) __attribute__((visibility("default")));

int pthread_rwlock_longrdlock_np(pthread_rwlock_t *) __attribute__((visibility("default")));
int pthread_rwlock_yieldwrlock_np(pthread_rwlock_t *) __attribute__((visibility("default")));
int pthread_rwlock_downgrade_np(pthread_rwlock_t *);
int pthread_rwlock_upgrade_np(pthread_rwlock_t *);
int pthread_rwlock_tryupgrade_np(pthread_rwlock_t *);
int pthread_rwlock_held_np(pthread_rwlock_t *);
int pthread_rwlock_rdheld_np(pthread_rwlock_t *);
int pthread_rwlock_wrheld_np(pthread_rwlock_t *);


int pthread_getname_np(pthread_t,char*,size_t) __attribute__((visibility("default")));
int pthread_setname_np(const char*) __attribute__((visibility("default")));

int pthread_main_np(void);


mach_port_t pthread_mach_thread_np(pthread_t);
size_t pthread_get_stacksize_np(pthread_t);
void * pthread_get_stackaddr_np(pthread_t);


int pthread_cond_signal_thread_np(pthread_cond_t *, pthread_t);


int pthread_cond_timedwait_relative_np(pthread_cond_t *,
     pthread_mutex_t *,
     const struct timespec *);


int pthread_create_suspended_np(pthread_t *,
                         const pthread_attr_t *,
                         void *(*)(void *),
                         void *);
int pthread_kill(pthread_t, int);

pthread_t pthread_from_mach_thread_np(mach_port_t) __attribute__((visibility("default")));

int pthread_sigmask(int, const sigset_t *, sigset_t *) __asm("_" "pthread_sigmask" );
void pthread_yield_np(void);


# 86 "../l0/lrt/ulnx/pic.h" 2
extern pthread_key_t lrt_pic_myid_pthreadkey;
#define lrt_pic_myid ((lrt_pic_id)pthread_getspecific(lrt_pic_myid_pthreadkey))



extern lrt_pic_id lrt_pic_firstid;
volatile extern lrt_pic_id lrt_pic_lastid;

extern uintptr_t lrt_pic_getIPIvec(void);
extern uintptr_t lrt_pic_firstvec(void);
extern uintptr_t lrt_pic_numvec(void);



extern intptr_t lrt_pic_init(lrt_pic_handler h);



extern intptr_t lrt_pic_loop(void);
extern intptr_t lrt_pic_allocvec(uintptr_t *vec);
extern intptr_t lrt_pic_mapvec_local(lrt_pic_src src, uintptr_t vec,
         lrt_pic_handler h);
extern intptr_t lrt_pic_mapvec(lrt_pic_src src, uintptr_t vec,
          lrt_pic_handler h);



extern intptr_t lrt_pic_add_core();



extern intptr_t lrt_pic_mapipi(lrt_pic_handler h);
extern intptr_t lrt_pic_mapreset(lrt_pic_handler h);
extern intptr_t lrt_pic_reset(lrt_pic_id targets);
extern intptr_t lrt_pic_ipi(lrt_pic_id targets);
extern void lrt_pic_ackipi(void);
extern void lrt_pic_enable(uintptr_t vec);
extern void lrt_pic_enableipi(void);
extern void lrt_pic_disable(uintptr_t vec);
extern void lrt_pic_disableipi(void);
# 27 "../l0/lrt/pic.h" 2
# 63 "../l0/EventMgrPrim.h" 2
typedef uintptr_t EvntLoc;
inline static EvntLoc MyEL() { return ((lrt_pic_id)pthread_getspecific(lrt_pic_myid_pthreadkey)); }





typedef struct EventMgrPrim_obj EventMgrPrim; typedef EventMgrPrim * EventMgrPrimRef; struct EventMgrPrim_obj { struct EventMgrPrim_if *ft; }; typedef EventMgrPrimRef *EventMgrPrimId; struct EventMgrPrim_if {
  EBBRC (*registerHandler) (void *_self, uintptr_t eventNo,
       EventHandlerId handler,
       uintptr_t isrc);
  EBBRC (*registerIPIHandler) (void *_self, EventHandlerId handler);

  EBBRC (*allocEventNo) (void *_self, uintptr_t *eventNoPtr);

  EBBRC (*dispatchIPI) (void *_self, EvntLoc el);


  EBBRC (*dispatchEventLocal) (void *_self, uintptr_t eventNo);
};


extern EventMgrPrimId theEventMgrPrimId;
# 35 "../apps/ssac/ssac.c" 2
# 1 "../l0/EventMgrPrimImp.h" 1

#define __EBB_EVENT_MGR_PRIM_IMP_H__ 
# 24 "../l0/EventMgrPrimImp.h"
extern EBBRC EventMgrPrimImpInit(void);
extern void EventMgrPrimImpTest(void);
extern void EventMgrEventLoop(void);
# 36 "../apps/ssac/ssac.c" 2
# 1 "../l0/MemMgr.h" 1

#define __EBBMEMMGR_H__ 
# 25 "../l0/MemMgr.h"
typedef enum {EBB_MEM_LOCAL, EBB_MEM_LOCAL_PADDED,
       EBB_MEM_GLOBAL, EBB_MEM_GLOBAL_PADDED,
       EBB_MEM_DEFAULT = EBB_MEM_GLOBAL} EBB_MEM_POOL;

typedef struct EBBMemMgr_obj EBBMemMgr; typedef EBBMemMgr * EBBMemMgrRef; struct EBBMemMgr_obj {
  struct EBBMemMgr_if *ft;
};

struct EBBMemMgr_if {
  EBBRC (*alloc) (EBBMemMgrRef _self, uintptr_t size, void **mem, EBB_MEM_POOL pool);
  EBBRC (*free) (EBBMemMgrRef _self, uintptr_t size, void *mem);
};

typedef EBBMemMgrRef *EBBMemMgrId;
# 37 "../apps/ssac/ssac.c" 2
# 1 "../l0/MemMgrPrim.h" 1

#define __EBB_MEMMGRPRIM_H__ 
# 27 "../l0/MemMgrPrim.h"
extern EBBRC EBBMemMgrPrimInit(void);



extern EBBMemMgrId theEBBMemMgrPrimId;

static inline EBBRC
EBBPrimMalloc(uintptr_t size, void *mem, EBB_MEM_POOL pool) {
  return (EBBId_DREF(theEBBMemMgrPrimId)->ft->alloc(EBBId_DREF(theEBBMemMgrPrimId), size, (void **)mem, pool));
}

static inline EBBRC
EBBPrimFree(uintptr_t size, void *mem) {
  return (EBBId_DREF(theEBBMemMgrPrimId)->ft->free(EBBId_DREF(theEBBMemMgrPrimId), size, mem));
}
# 38 "../apps/ssac/ssac.c" 2

# 1 "../l0/lrt/types.h" 1

#define __CORE_LRT_TYPES_H__ 
# 26 "../l0/lrt/types.h"
# 1 "../l0/lrt/ulnx/types.h" 1

#define __ULNX_EBB_TYPES_H__ 
# 27 "../l0/lrt/types.h" 2
# 40 "../apps/ssac/ssac.c" 2

# 1 "../l0/lrt/trans.h" 1

#define __LRT_TRANS_H__ 
# 27 "../l0/lrt/trans.h"
struct lrt_trans;


# 1 "../l0/lrt/ulnx/trans.h" 1

#define __LRT_ULNX_TRANS_H__ 





#define LRT_TRANS_LG2_PAGESIZE (12)
#define LRT_TRANS_LG2_NUMPAGES (8)
#define LRT_TRANS_PAGESIZE (1 << LRT_TRANS_LG2_PAGESIZE)
#define LRT_TRANS_NUMPAGES (1 << LRT_TRANS_LG2_NUMPAGES)
#define LRT_TRANS_LG2_TBLSIZE (LRT_TRANS_LG2_PAGESIZE + LRT_TRANS_LG2_NUMPAGES)

#define LRT_TRANS_TBLSIZE (1 << LRT_TRANS_LG2_TBLSIZE)

struct TransMemDesc {
  uint8_t GMem [(1 << ((12) + (8)))];
  uint8_t LMem [(1 << ((12) + (8))) * LRT_PIC_MAX_PICS];
};

extern struct TransMemDesc TransMem;

static inline void *
lrt_trans_gmem(void)
{
  return TransMem.GMem;
}

static inline void *
lrt_trans_lmem(void)
{
  uintptr_t picbase = ((lrt_pic_id)pthread_getspecific(lrt_pic_myid_pthreadkey)) * (1 << ((12) + (8)));
  return (&(TransMem.LMem[picbase]));
}

static inline uintptr_t
lrt_trans_offset(uintptr_t base, uintptr_t t)
{
  return (uintptr_t)(t - base);
}

static inline uintptr_t
lrt_trans_idbase(void)
{
  return (uintptr_t)&(TransMem.LMem[0]);
}

static inline struct lrt_trans *
lrt_trans_id2lt(uintptr_t i)
{
  return (struct lrt_trans *)(((uintptr_t)lrt_trans_lmem()) +
         lrt_trans_offset(lrt_trans_idbase(), i));
}

static inline uintptr_t
lrt_trans_lt2id(struct lrt_trans *t)
{
  return (uintptr_t)(lrt_trans_idbase() +
       lrt_trans_offset((uintptr_t)lrt_trans_lmem(), (uintptr_t)t));
}

static inline struct lrt_trans *
lrt_trans_id2gt(uintptr_t i)
{
  return (struct lrt_trans *)(((uintptr_t)lrt_trans_gmem()) +
         lrt_trans_offset(lrt_trans_idbase(), i));
}

static inline uintptr_t
lrt_trans_gt2id(struct lrt_trans *t)
{
  return (uintptr_t)(lrt_trans_idbase() +
       lrt_trans_offset((uintptr_t)lrt_trans_gmem(),
          (uintptr_t)t));
}

static inline struct lrt_trans *
lrt_trans_gt2lt(struct lrt_trans *gt)
{
  return (struct lrt_trans *)(((uintptr_t)lrt_trans_lmem()) +
         lrt_trans_offset((uintptr_t)lrt_trans_gmem(),
            (uintptr_t)gt));
}

static inline struct lrt_trans *
lrt_trans_lt2gt(struct lrt_trans *lt)
{
  return (struct lrt_trans *)(((uintptr_t)lrt_trans_gmem()) +
         lrt_trans_offset((uintptr_t)lrt_trans_lmem(),
            (uintptr_t)lt));
}




void lrt_trans_init(void);
# 31 "../l0/lrt/trans.h" 2




# 1 "../lrt/assert.h" 1

#define __EBB_ASSERT_H__ 
# 25 "../lrt/assert.h"
# 1 "./config.h" 1




#define ARCH_AMD64 1
# 20 "./config.h"
#define HAVE_ARPA_INET_H 1


#define HAVE_FCNTL_H 1


#define HAVE_INTMAX_T 1


#define HAVE_INTPTR_T 1


#define HAVE_INTTYPES_H 1


#define HAVE_LONG_LONG_INT 1


#define HAVE_MEMORY_H 1


#define HAVE_NETDB_H 1


#define HAVE_NETINET_IN_H 1


#define HAVE_STDINT_H 1


#define HAVE_STDLIB_H 1


#define HAVE_STRINGS_H 1


#define HAVE_STRING_H 1


#define HAVE_SYS_SOCKET_H 1


#define HAVE_SYS_STAT_H 1


#define HAVE_SYS_TYPES_H 1


#define HAVE_UINTMAX_T 1


#define HAVE_UINTPTR_T 1


#define HAVE_UNISTD_H 1


#define HAVE_UNSIGNED_LONG_LONG_INT 1





#define LRT_ULNX 1





#define PACKAGE "ebblib"


#define PACKAGE_BUGREPORT "sesa-developers@googlegroups.com"


#define PACKAGE_NAME "EBBLib"


#define PACKAGE_STRING "EBBLib 0.1"


#define PACKAGE_TARNAME "ebblib"


#define PACKAGE_URL ""


#define PACKAGE_VERSION "0.1"


#define STDC_HEADERS 1


#define VERSION "0.1"
# 26 "../lrt/assert.h" 2


# 1 "../lrt/ulnx/assert.h" 1

#define __ULNX_EBB_ASSERT_H__ 
# 25 "../lrt/ulnx/assert.h"
# 1 "/usr/include/assert.h" 1 3 4
# 52 "/usr/include/assert.h" 3 4
#undef assert
#undef __assert
# 75 "/usr/include/assert.h" 3 4

void __assert_rtn(const char *, const char *, int, const char *) __attribute__((__noreturn__));










#define __assert(e,file,line) __assert_rtn ((const char *)-1L, file, line, e)




#define assert(e) (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __FILE__, __LINE__, #e) : (void)0)
# 26 "../lrt/ulnx/assert.h" 2

#define LRT_EBBAssert assert
#define LRT_EBBWAssert(exp) ((void) ((exp) ? 0 : printf ("%s:%u: warning assert `%s'\n", __FILE__, __LINE__, #exp)))
# 29 "../lrt/assert.h" 2




#define EBBAssert LRT_EBBAssert
#define EBBWAssert LRT_EBBWAssert
#define EBBRCAssert(rc) EBBAssert(EBBRC_SUCCESS(rc))
# 47 "../lrt/assert.h"
#define STATIC_ASSERT(b,s) 
# 36 "../l0/lrt/trans.h" 2







struct lrt_trans {
  uint64_t vals[4];
};

#define LRT_TRANS_NUMIDS_PERPAGE (LRT_TRANS_PAGESIZE / sizeof(struct lrt_trans))


;
# 42 "../apps/ssac/ssac.c" 2
# 1 "../l0/types.h" 1

#define __CORE_TYPES_H__ 
# 29 "../l0/types.h"
union EBBTransStruct;

typedef union EBBTransStruct EBBTrans;
typedef EBBTrans EBBLTrans;

typedef EBBTrans *EBBId;

typedef intptr_t EBBRC;
typedef enum {
  EBBRC_GENERIC_FAILURE = -1,
  EBBRC_BADPARAMETER = -2,
  EBBRC_OUTOFRESOURCES = -3,
  EBBRC_OK = 0
} EBBRC_STDVALS;
#define EBBRC_SUCCESS(rc) ( rc >= 0 )




typedef EBBRC (*EBBFunc) (void *);
typedef EBBFunc *EBBRep;
typedef EBBRep *EBBRepRef;

typedef uintptr_t FuncNum;
typedef uintptr_t EBBMissArg;



typedef EBBRC (*EBBMissFunc) (EBBRep **, EBBLTrans *, FuncNum,
        EBBMissArg);



extern void EBBCacheObj(EBBLTrans *lt, EBBRep *obj);






static inline
EBBLTrans *
EBBIdToLTrans(EBBId id) {
  return (EBBLTrans *)lrt_trans_id2lt((uintptr_t)id);
}

static inline
EBBRep *
EBBId_DREF_Inline(EBBId id) {
  EBBLTrans *lt;
  lt = EBBIdToLTrans(id);


  return *(EBBRep **)lt;
}

#define EBBId_DREF(id) ((typeof(*id))EBBId_DREF_Inline((EBBId)id))
# 43 "../apps/ssac/ssac.c" 2
# 1 "../l0/sys/trans.h" 1

#define __EBB_TRANS_H__ 
# 27 "../l0/sys/trans.h"
# 1 "../l0/const.h" 1

#define __EBB_CONSTS_H__ 
# 25 "../l0/const.h"
# 1 "../l0/lrt/const.h" 1

#define __LRT_CONST_H__ 
# 26 "../l0/lrt/const.h"
# 1 "../l0/lrt/ulnx/const.h" 1

#define __ULNX_EBB_CONST_H__ 
# 25 "../l0/lrt/ulnx/const.h"
#define LRT_MAX_VPS (4)
#define LRT_TRANS_MAX_ELS (LRT_MAX_VPS)
# 27 "../l0/lrt/const.h" 2
# 26 "../l0/const.h" 2

#define EBB_TRANS_MAX_NODES (1024)
#define EBB_TRANS_PAGE_SIZE (4096)
#define EBB_TRANS_NUM_PAGES (1024)
#define EBB_TRANS_MAX_ELS (LRT_TRANS_MAX_ELS_ASM)
#define EBB_TRANS_MAX_FUNCS (256)
# 28 "../l0/sys/trans.h" 2


typedef EBBTrans EBBGTrans;

extern EBBFunc EBBDefFT[(256)];




extern void trans_init(void);
# 44 "../apps/ssac/ssac.c" 2

# 1 "../lrt/io.h" 1

#define __LRTIO_H__ 
# 28 "../lrt/io.h"
# 1 "../lrt/ulnx/io.h" 1

#define __ULNX_EBB_IO_H__ 
# 25 "../lrt/ulnx/io.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 69 "/usr/include/unistd.h" 3 4
#define _UNISTD_H_ 


# 1 "/usr/include/sys/unistd.h" 1 3 4
# 65 "/usr/include/sys/unistd.h" 3 4
#define _SYS_UNISTD_H_ 
# 79 "/usr/include/sys/unistd.h" 3 4
#define _POSIX_VERSION 200112L
#define _POSIX2_VERSION 200112L




#define _POSIX_VDISABLE ((unsigned char)'\377')


#define _POSIX_THREAD_KEYS_MAX 128


#define F_OK 0
#define X_OK (1<<0)
#define W_OK (1<<1)
#define R_OK (1<<2)







#define _READ_OK (1<<9)
#define _WRITE_OK (1<<10)
#define _EXECUTE_OK (1<<11)
#define _DELETE_OK (1<<12)
#define _APPEND_OK (1<<13)
#define _RMFILE_OK (1<<14)
#define _RATTR_OK (1<<15)
#define _WATTR_OK (1<<16)
#define _REXT_OK (1<<17)
#define _WEXT_OK (1<<18)
#define _RPERM_OK (1<<19)
#define _WPERM_OK (1<<20)
#define _CHOWN_OK (1<<21)

#define _ACCESS_EXTENDED_MASK (_READ_OK | _WRITE_OK | _EXECUTE_OK | _DELETE_OK | _APPEND_OK | _RMFILE_OK | _REXT_OK | _WEXT_OK | _RATTR_OK | _WATTR_OK | _RPERM_OK | _WPERM_OK | _CHOWN_OK)
# 125 "/usr/include/sys/unistd.h" 3 4
#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2




#define L_SET SEEK_SET
#define L_INCR SEEK_CUR
#define L_XTND SEEK_END



struct accessx_descriptor {
 unsigned int ad_name_offset;
 int ad_flags;
 int ad_pad[2];
};
#define ACCESSX_MAX_DESCRIPTORS 100
#define ACCESSX_MAX_TABLESIZE (16 * 1024)



#define _PC_LINK_MAX 1
#define _PC_MAX_CANON 2
#define _PC_MAX_INPUT 3
#define _PC_NAME_MAX 4
#define _PC_PATH_MAX 5
#define _PC_PIPE_BUF 6
#define _PC_CHOWN_RESTRICTED 7
#define _PC_NO_TRUNC 8
#define _PC_VDISABLE 9


#define _PC_NAME_CHARS_MAX 10
#define _PC_CASE_SENSITIVE 11
#define _PC_CASE_PRESERVING 12
#define _PC_EXTENDED_SECURITY_NP 13
#define _PC_AUTH_OPAQUE_NP 14


#define _PC_2_SYMLINKS 15
#define _PC_ALLOC_SIZE_MIN 16
#define _PC_ASYNC_IO 17
#define _PC_FILESIZEBITS 18
#define _PC_PRIO_IO 19
#define _PC_REC_INCR_XFER_SIZE 20
#define _PC_REC_MAX_XFER_SIZE 21
#define _PC_REC_MIN_XFER_SIZE 22
#define _PC_REC_XFER_ALIGN 23
#define _PC_SYMLINK_MAX 24
#define _PC_SYNC_IO 25
#define _PC_XATTR_SIZE_BITS 26


#define _CS_PATH 1
# 73 "/usr/include/unistd.h" 2 3 4



#define _GID_T 
typedef __darwin_gid_t gid_t;
# 86 "/usr/include/unistd.h" 3 4
#define _OFF_T 
typedef __darwin_off_t off_t;



#define _PID_T 
typedef __darwin_pid_t pid_t;
# 103 "/usr/include/unistd.h" 3 4
#define _SSIZE_T 
typedef __darwin_ssize_t ssize_t;



#define _UID_T 
typedef __darwin_uid_t uid_t;



#define _USECONDS_T 
typedef __darwin_useconds_t useconds_t;






#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2




#define _XOPEN_VERSION 600
#define _XOPEN_XCU_VERSION 4



#define _POSIX_ADVISORY_INFO (-1)
#define _POSIX_ASYNCHRONOUS_IO (-1)
#define _POSIX_BARRIERS (-1)
#define _POSIX_CHOWN_RESTRICTED 200112L
#define _POSIX_CLOCK_SELECTION (-1)
#define _POSIX_CPUTIME (-1)
#define _POSIX_FSYNC 200112L
#define _POSIX_IPV6 200112L
#define _POSIX_JOB_CONTROL 200112L
#define _POSIX_MAPPED_FILES 200112L
#define _POSIX_MEMLOCK (-1)
#define _POSIX_MEMLOCK_RANGE (-1)
#define _POSIX_MEMORY_PROTECTION 200112L
#define _POSIX_MESSAGE_PASSING (-1)
#define _POSIX_MONOTONIC_CLOCK (-1)
#define _POSIX_NO_TRUNC 200112L
#define _POSIX_PRIORITIZED_IO (-1)
#define _POSIX_PRIORITY_SCHEDULING (-1)
#define _POSIX_RAW_SOCKETS (-1)
#define _POSIX_READER_WRITER_LOCKS 200112L
#define _POSIX_REALTIME_SIGNALS (-1)
#define _POSIX_REGEXP 200112L
#define _POSIX_SAVED_IDS 200112L
#define _POSIX_SEMAPHORES (-1)
#define _POSIX_SHARED_MEMORY_OBJECTS (-1)
#define _POSIX_SHELL 200112L
#define _POSIX_SPAWN (-1)
#define _POSIX_SPIN_LOCKS (-1)
#define _POSIX_SPORADIC_SERVER (-1)
#define _POSIX_SYNCHRONIZED_IO (-1)
#define _POSIX_THREAD_ATTR_STACKADDR 200112L
#define _POSIX_THREAD_ATTR_STACKSIZE 200112L
#define _POSIX_THREAD_CPUTIME (-1)
#define _POSIX_THREAD_PRIO_INHERIT (-1)
#define _POSIX_THREAD_PRIO_PROTECT (-1)
#define _POSIX_THREAD_PRIORITY_SCHEDULING (-1)
#define _POSIX_THREAD_PROCESS_SHARED 200112L
#define _POSIX_THREAD_SAFE_FUNCTIONS 200112L
#define _POSIX_THREAD_SPORADIC_SERVER (-1)
#define _POSIX_THREADS 200112L
#define _POSIX_TIMEOUTS (-1)
#define _POSIX_TIMERS (-1)
#define _POSIX_TRACE (-1)
#define _POSIX_TRACE_EVENT_FILTER (-1)
#define _POSIX_TRACE_INHERIT (-1)
#define _POSIX_TRACE_LOG (-1)
#define _POSIX_TYPED_MEMORY_OBJECTS (-1)





#define _POSIX2_C_BIND 200112L
#define _POSIX2_C_DEV 200112L
#define _POSIX2_CHAR_TERM 200112L
#define _POSIX2_FORT_DEV (-1)
#define _POSIX2_FORT_RUN 200112L
#define _POSIX2_LOCALEDEF 200112L
#define _POSIX2_PBS (-1)
#define _POSIX2_PBS_ACCOUNTING (-1)
#define _POSIX2_PBS_CHECKPOINT (-1)
#define _POSIX2_PBS_LOCATE (-1)
#define _POSIX2_PBS_MESSAGE (-1)
#define _POSIX2_PBS_TRACK (-1)
#define _POSIX2_SW_DEV 200112L
#define _POSIX2_UPE 200112L


#define __ILP32_OFF32 (-1)
#define __ILP32_OFFBIG (-1)
#define __LP64_OFF64 (-1)
#define __LPBIG_OFFBIG (-1)


#undef __LP64_OFF64
#define __LP64_OFF64 (1)
#undef __LPBIG_OFFBIG
#define __LPBIG_OFFBIG (1)






#define _POSIX_V6_ILP32_OFF32 __ILP32_OFF32
#define _POSIX_V6_ILP32_OFFBIG __ILP32_OFFBIG
#define _POSIX_V6_LP64_OFF64 __LP64_OFF64
#define _POSIX_V6_LPBIG_OFFBIG __LPBIG_OFFBIG



#define _POSIX_V7_ILP32_OFF32 __ILP32_OFF32
#define _POSIX_V7_ILP32_OFFBIG __ILP32_OFFBIG
#define _POSIX_V7_LP64_OFF64 __LP64_OFF64
#define _POSIX_V7_LPBIG_OFFBIG __LPBIG_OFFBIG



#define _V6_ILP32_OFF32 __ILP32_OFF32
#define _V6_ILP32_OFFBIG __ILP32_OFFBIG
#define _V6_LP64_OFF64 __LP64_OFF64
#define _V6_LPBIG_OFFBIG __LPBIG_OFFBIG




#define _XBS5_ILP32_OFF32 __ILP32_OFF32
#define _XBS5_ILP32_OFFBIG __ILP32_OFFBIG
#define _XBS5_LP64_OFF64 __LP64_OFF64
#define _XBS5_LPBIG_OFFBIG __LPBIG_OFFBIG



#define _XOPEN_CRYPT (1)
#define _XOPEN_ENH_I18N (1)
#define _XOPEN_LEGACY (-1)
#define _XOPEN_REALTIME (-1)
#define _XOPEN_REALTIME_THREADS (-1)
#define _XOPEN_SHM (1)
#define _XOPEN_STREAMS (-1)
#define _XOPEN_UNIX (1)



#define _SC_ARG_MAX 1
#define _SC_CHILD_MAX 2
#define _SC_CLK_TCK 3
#define _SC_NGROUPS_MAX 4
#define _SC_OPEN_MAX 5
#define _SC_JOB_CONTROL 6
#define _SC_SAVED_IDS 7
#define _SC_VERSION 8
#define _SC_BC_BASE_MAX 9
#define _SC_BC_DIM_MAX 10
#define _SC_BC_SCALE_MAX 11
#define _SC_BC_STRING_MAX 12
#define _SC_COLL_WEIGHTS_MAX 13
#define _SC_EXPR_NEST_MAX 14
#define _SC_LINE_MAX 15
#define _SC_RE_DUP_MAX 16
#define _SC_2_VERSION 17
#define _SC_2_C_BIND 18
#define _SC_2_C_DEV 19
#define _SC_2_CHAR_TERM 20
#define _SC_2_FORT_DEV 21
#define _SC_2_FORT_RUN 22
#define _SC_2_LOCALEDEF 23
#define _SC_2_SW_DEV 24
#define _SC_2_UPE 25
#define _SC_STREAM_MAX 26
#define _SC_TZNAME_MAX 27


#define _SC_ASYNCHRONOUS_IO 28
#define _SC_PAGESIZE 29
#define _SC_MEMLOCK 30
#define _SC_MEMLOCK_RANGE 31
#define _SC_MEMORY_PROTECTION 32
#define _SC_MESSAGE_PASSING 33
#define _SC_PRIORITIZED_IO 34
#define _SC_PRIORITY_SCHEDULING 35
#define _SC_REALTIME_SIGNALS 36
#define _SC_SEMAPHORES 37
#define _SC_FSYNC 38
#define _SC_SHARED_MEMORY_OBJECTS 39
#define _SC_SYNCHRONIZED_IO 40
#define _SC_TIMERS 41
#define _SC_AIO_LISTIO_MAX 42
#define _SC_AIO_MAX 43
#define _SC_AIO_PRIO_DELTA_MAX 44
#define _SC_DELAYTIMER_MAX 45
#define _SC_MQ_OPEN_MAX 46
#define _SC_MAPPED_FILES 47
#define _SC_RTSIG_MAX 48
#define _SC_SEM_NSEMS_MAX 49
#define _SC_SEM_VALUE_MAX 50
#define _SC_SIGQUEUE_MAX 51
#define _SC_TIMER_MAX 52



#define _SC_NPROCESSORS_CONF 57
#define _SC_NPROCESSORS_ONLN 58



#define _SC_2_PBS 59
#define _SC_2_PBS_ACCOUNTING 60
#define _SC_2_PBS_CHECKPOINT 61
#define _SC_2_PBS_LOCATE 62
#define _SC_2_PBS_MESSAGE 63
#define _SC_2_PBS_TRACK 64
#define _SC_ADVISORY_INFO 65
#define _SC_BARRIERS 66
#define _SC_CLOCK_SELECTION 67
#define _SC_CPUTIME 68
#define _SC_FILE_LOCKING 69
#define _SC_GETGR_R_SIZE_MAX 70
#define _SC_GETPW_R_SIZE_MAX 71
#define _SC_HOST_NAME_MAX 72
#define _SC_LOGIN_NAME_MAX 73
#define _SC_MONOTONIC_CLOCK 74
#define _SC_MQ_PRIO_MAX 75
#define _SC_READER_WRITER_LOCKS 76
#define _SC_REGEXP 77
#define _SC_SHELL 78
#define _SC_SPAWN 79
#define _SC_SPIN_LOCKS 80
#define _SC_SPORADIC_SERVER 81
#define _SC_THREAD_ATTR_STACKADDR 82
#define _SC_THREAD_ATTR_STACKSIZE 83
#define _SC_THREAD_CPUTIME 84
#define _SC_THREAD_DESTRUCTOR_ITERATIONS 85
#define _SC_THREAD_KEYS_MAX 86
#define _SC_THREAD_PRIO_INHERIT 87
#define _SC_THREAD_PRIO_PROTECT 88
#define _SC_THREAD_PRIORITY_SCHEDULING 89
#define _SC_THREAD_PROCESS_SHARED 90
#define _SC_THREAD_SAFE_FUNCTIONS 91
#define _SC_THREAD_SPORADIC_SERVER 92
#define _SC_THREAD_STACK_MIN 93
#define _SC_THREAD_THREADS_MAX 94
#define _SC_TIMEOUTS 95
#define _SC_THREADS 96
#define _SC_TRACE 97
#define _SC_TRACE_EVENT_FILTER 98
#define _SC_TRACE_INHERIT 99
#define _SC_TRACE_LOG 100
#define _SC_TTY_NAME_MAX 101
#define _SC_TYPED_MEMORY_OBJECTS 102
#define _SC_V6_ILP32_OFF32 103
#define _SC_V6_ILP32_OFFBIG 104
#define _SC_V6_LP64_OFF64 105
#define _SC_V6_LPBIG_OFFBIG 106
#define _SC_IPV6 118
#define _SC_RAW_SOCKETS 119
#define _SC_SYMLOOP_MAX 120



#define _SC_ATEXIT_MAX 107
#define _SC_IOV_MAX 56
#define _SC_PAGE_SIZE _SC_PAGESIZE
#define _SC_XOPEN_CRYPT 108
#define _SC_XOPEN_ENH_I18N 109
#define _SC_XOPEN_LEGACY 110
#define _SC_XOPEN_REALTIME 111
#define _SC_XOPEN_REALTIME_THREADS 112
#define _SC_XOPEN_SHM 113
#define _SC_XOPEN_STREAMS 114
#define _SC_XOPEN_UNIX 115
#define _SC_XOPEN_VERSION 116
#define _SC_XOPEN_XCU_VERSION 121




#define _SC_XBS5_ILP32_OFF32 122
#define _SC_XBS5_ILP32_OFFBIG 123
#define _SC_XBS5_LP64_OFF64 124
#define _SC_XBS5_LPBIG_OFFBIG 125



#define _SC_SS_REPL_MAX 126
#define _SC_TRACE_EVENT_NAME_MAX 127
#define _SC_TRACE_NAME_MAX 128
#define _SC_TRACE_SYS_MAX 129
#define _SC_TRACE_USER_EVENT_MAX 130




#define _SC_PASS_MAX 131
# 416 "/usr/include/unistd.h" 3 4
#define _CS_POSIX_V6_ILP32_OFF32_CFLAGS 2
#define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS 3
#define _CS_POSIX_V6_ILP32_OFF32_LIBS 4
#define _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS 5
#define _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS 6
#define _CS_POSIX_V6_ILP32_OFFBIG_LIBS 7
#define _CS_POSIX_V6_LP64_OFF64_CFLAGS 8
#define _CS_POSIX_V6_LP64_OFF64_LDFLAGS 9
#define _CS_POSIX_V6_LP64_OFF64_LIBS 10
#define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS 11
#define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS 12
#define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS 13
#define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS 14




#define _CS_XBS5_ILP32_OFF32_CFLAGS 20
#define _CS_XBS5_ILP32_OFF32_LDFLAGS 21
#define _CS_XBS5_ILP32_OFF32_LIBS 22
#define _CS_XBS5_ILP32_OFF32_LINTFLAGS 23
#define _CS_XBS5_ILP32_OFFBIG_CFLAGS 24
#define _CS_XBS5_ILP32_OFFBIG_LDFLAGS 25
#define _CS_XBS5_ILP32_OFFBIG_LIBS 26
#define _CS_XBS5_ILP32_OFFBIG_LINTFLAGS 27
#define _CS_XBS5_LP64_OFF64_CFLAGS 28
#define _CS_XBS5_LP64_OFF64_LDFLAGS 29
#define _CS_XBS5_LP64_OFF64_LIBS 30
#define _CS_XBS5_LP64_OFF64_LINTFLAGS 31
#define _CS_XBS5_LPBIG_OFFBIG_CFLAGS 32
#define _CS_XBS5_LPBIG_OFFBIG_LDFLAGS 33
#define _CS_XBS5_LPBIG_OFFBIG_LIBS 34
#define _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS 35



#define _CS_DARWIN_USER_DIR 65536
#define _CS_DARWIN_USER_TEMP_DIR 65537
#define _CS_DARWIN_USER_CACHE_DIR 65538
# 468 "/usr/include/unistd.h" 3 4

void _exit(int) __attribute__((__noreturn__));
int access(const char *, int);
unsigned int
  alarm(unsigned int);
int chdir(const char *);
int chown(const char *, uid_t, gid_t);

int close(int) __asm("_" "close" );

int dup(int);
int dup2(int, int);
int execl(const char *, const char *, ...);
int execle(const char *, const char *, ...);
int execlp(const char *, const char *, ...);
int execv(const char *, char * const *);
int execve(const char *, char * const *, char * const *);
int execvp(const char *, char * const *);
pid_t fork(void);
long fpathconf(int, int);
char *getcwd(char *, size_t);
gid_t getegid(void);
uid_t geteuid(void);
gid_t getgid(void);



int getgroups(int, gid_t []);

char *getlogin(void);
pid_t getpgrp(void);
pid_t getpid(void);
pid_t getppid(void);
uid_t getuid(void);
int isatty(int);
int link(const char *, const char *);
off_t lseek(int, off_t, int);
long pathconf(const char *, int);

int pause(void) __asm("_" "pause" );

int pipe(int [2]);

ssize_t read(int, void *, size_t) __asm("_" "read" );

int rmdir(const char *);
int setgid(gid_t);
int setpgid(pid_t, pid_t);
pid_t setsid(void);
int setuid(uid_t);

unsigned int
  sleep(unsigned int) __asm("_" "sleep" );

long sysconf(int);
pid_t tcgetpgrp(int);
int tcsetpgrp(int, pid_t);
char *ttyname(int);


int ttyname_r(int, char *, size_t) __asm("_" "ttyname_r" );




int unlink(const char *);

ssize_t write(int, const void *, size_t) __asm("_" "write" );

# 545 "/usr/include/unistd.h" 3 4

size_t confstr(int, char *, size_t) __asm("_" "confstr" );

int getopt(int, char * const [], const char *) __asm("_" "getopt" );

extern char *optarg;
extern int optind, opterr, optopt;

# 565 "/usr/include/unistd.h" 3 4
#define F_ULOCK 0
#define F_LOCK 1
#define F_TLOCK 2
#define F_TEST 3






void *brk(const void *);
int chroot(const char *) ;


char *crypt(const char *, const char *);


#define __CTERMID_DEFINED 1
char *ctermid(char *);


void encrypt(char *, int) __asm("_" "encrypt" );



int fchdir(int);
long gethostid(void);
pid_t getpgid(pid_t);
pid_t getsid(pid_t);



int getdtablesize(void) ;
int getpagesize(void) __attribute__((__const__)) ;
char *getpass(const char *) ;




char *getwd(char *) ;


int lchown(const char *, uid_t, gid_t) __asm("_" "lchown" );

int lockf(int, int, off_t) __asm("_" "lockf" );

int nice(int) __asm("_" "nice" );

ssize_t pread(int, void *, size_t, off_t) __asm("_" "pread" );

ssize_t pwrite(int, const void *, size_t, off_t) __asm("_" "pwrite" );





void *sbrk(int);



pid_t setpgrp(void) __asm("_" "setpgrp" );




int setregid(gid_t, gid_t) __asm("_" "setregid" );

int setreuid(uid_t, uid_t) __asm("_" "setreuid" );

void swab(const void * restrict, void * restrict, ssize_t);
void sync(void);
int truncate(const char *, off_t);
useconds_t ualarm(useconds_t, useconds_t);
int usleep(useconds_t) __asm("_" "usleep" );
pid_t vfork(void);


int fsync(int) __asm("_" "fsync" );

int ftruncate(int, off_t);
int getlogin_r(char *, size_t);

# 657 "/usr/include/unistd.h" 3 4

int fchown(int, uid_t, gid_t);
int gethostname(char *, size_t);
ssize_t readlink(const char * restrict, char * restrict, size_t);
int setegid(gid_t);
int seteuid(uid_t);
int symlink(const char *, const char *);








# 1 "/usr/include/sys/select.h" 1 3 4
# 64 "/usr/include/sys/select.h" 3 4
#define _SYS_SELECT_H_ 

# 1 "/usr/include/sys/appleapiopts.h" 1 3 4
# 30 "/usr/include/sys/appleapiopts.h" 3 4
#define __SYS_APPLEAPIOPTS_H__ 



#define __APPLE_API_STANDARD 



#define __APPLE_API_STABLE 





#define __APPLE_API_EVOLVING 



#define __APPLE_API_UNSTABLE 



#define __APPLE_API_PRIVATE 



#define __APPLE_API_OBSOLETE 
# 67 "/usr/include/sys/select.h" 2 3 4
# 75 "/usr/include/sys/select.h" 3 4
#define __need_fd_set 
#define __need_struct_timespec 
#define __need_struct_timeval 
# 1 "/usr/include/sys/_structs.h" 1 3 4
# 85 "/usr/include/sys/_structs.h" 3 4
#undef __need_struct_timespec
# 97 "/usr/include/sys/_structs.h" 3 4
#undef __need_struct_timeval

#define _STRUCT_TIMEVAL struct timeval
struct timeval
{
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
# 165 "/usr/include/sys/_structs.h" 3 4
#undef __need_fd_set

#define _FD_SET 
# 177 "/usr/include/sys/_structs.h" 3 4
#define __DARWIN_FD_SETSIZE 1024

#define __DARWIN_NBBY 8
#define __DARWIN_NFDBITS (sizeof(__int32_t) * __DARWIN_NBBY)
#define __DARWIN_howmany(x,y) ((((x) % (y)) == 0) ? ((x) / (y)) : (((x) / (y)) + 1))


typedef struct fd_set {
 __int32_t fds_bits[((((1024) % ((sizeof(__int32_t) * 8))) == 0) ? ((1024) / ((sizeof(__int32_t) * 8))) : (((1024) / ((sizeof(__int32_t) * 8))) + 1))];
} fd_set;



static __inline int
__darwin_fd_isset(int _n, const struct fd_set *_p)
{
 return (_p->fds_bits[_n/(sizeof(__int32_t) * 8)] & (1<<(_n % (sizeof(__int32_t) * 8))));
}

#define __DARWIN_FD_SET(n,p) do { int __fd = (n); ((p)->fds_bits[__fd/__DARWIN_NFDBITS] |= (1<<(__fd % __DARWIN_NFDBITS))); } while(0)
#define __DARWIN_FD_CLR(n,p) do { int __fd = (n); ((p)->fds_bits[__fd/__DARWIN_NFDBITS] &= ~(1<<(__fd % __DARWIN_NFDBITS))); } while(0)
#define __DARWIN_FD_ISSET(n,p) __darwin_fd_isset((n), (p))






#define __DARWIN_FD_ZERO(p) __builtin_bzero(p, sizeof(*(p)))




#define __DARWIN_FD_COPY(f,t) bcopy(f, t, sizeof(*(f)))
# 79 "/usr/include/sys/select.h" 2 3 4
# 91 "/usr/include/sys/select.h" 3 4
#define _SUSECONDS_T 
typedef __darwin_suseconds_t suseconds_t;
# 113 "/usr/include/sys/select.h" 3 4
#define FD_SETSIZE __DARWIN_FD_SETSIZE


#define FD_SET(n,p) __DARWIN_FD_SET(n, p)


#define FD_CLR(n,p) __DARWIN_FD_CLR(n, p)


#define FD_ISSET(n,p) __DARWIN_FD_ISSET(n, p)


#define FD_ZERO(p) __DARWIN_FD_ZERO(p)



#define FD_COPY(f,t) __DARWIN_FD_COPY(f, t)







int pselect(int, fd_set * restrict, fd_set * restrict,
  fd_set * restrict, const struct timespec * restrict,
  const sigset_t * restrict)




  __asm("_" "pselect" "$1050")




  ;


# 1 "/usr/include/sys/_select.h" 1 3 4
# 37 "/usr/include/sys/_select.h" 3 4
#define _SYS__SELECT_H_ 

int select(int, fd_set * restrict, fd_set * restrict,
  fd_set * restrict, struct timeval * restrict)




  __asm("_" "select" "$1050")




  ;
# 153 "/usr/include/sys/select.h" 2 3 4


# 673 "/usr/include/unistd.h" 2 3 4


#define _DEV_T 
typedef __darwin_dev_t dev_t;



#define _MODE_T 
typedef __darwin_mode_t mode_t;



#define _UUID_T 
typedef __darwin_uuid_t uuid_t;



void _Exit(int) __attribute__((__noreturn__));
int accessx_np(const struct accessx_descriptor *, size_t, int *, uid_t);
int acct(const char *);
int add_profil(char *, size_t, unsigned long, unsigned int);
void endusershell(void);
int execvP(const char *, const char *, char * const *);
char *fflagstostr(unsigned long);
int getdomainname(char *, int);
int getgrouplist(const char *, int, int *, int *);
int gethostuuid(uuid_t, const struct timespec *) __attribute__((visibility("default")));
mode_t getmode(const void *, mode_t);
int getpeereid(int, uid_t *, gid_t *);
int getsgroups_np(int *, uuid_t);
char *getusershell(void);
int getwgroups_np(int *, uuid_t);
int initgroups(const char *, int);
int iruserok(unsigned long, int, const char *, const char *);
int iruserok_sa(const void *, int, int, const char *, const char *);
int issetugid(void);
char *mkdtemp(char *);
int mknod(const char *, mode_t, dev_t);
int mkstemp(char *);
int mkstemps(char *, int);
char *mktemp(char *);
int nfssvc(int, void *);
int profil(char *, size_t, unsigned long, unsigned int);
int pthread_setugid_np(uid_t, gid_t);
int pthread_getugid_np( uid_t *, gid_t *);
int rcmd(char **, int, const char *, const char *, const char *, int *);
int rcmd_af(char **, int, const char *, const char *, const char *, int *,
  int);
int reboot(int);
int revoke(const char *);
int rresvport(int *);
int rresvport_af(int *, int);
int ruserok(const char *, int, const char *, const char *);
int setdomainname(const char *, int);
int setgroups(int, const gid_t *);
void sethostid(long);
int sethostname(const char *, int);

void setkey(const char *) __asm("_" "setkey" );



int setlogin(const char *);
void *setmode(const char *) __asm("_" "setmode" );
int setrgid(gid_t);
int setruid(uid_t);
int setsgroups_np(int, const uuid_t);
void setusershell(void);
int setwgroups_np(int, const uuid_t);
int strtofflags(char **, unsigned long *, unsigned long *);
int swapon(const char *);
int syscall(int, ...);
int ttyslot(void);
int undelete(const char *);
int unwhiteout(const char *);
void *valloc(size_t);

extern char *suboptarg;
int getsubopt(char **, char * const *, char **);



int fgetattrlist(int,void*,void*,size_t,unsigned int) __attribute__((visibility("default")));
int fsetattrlist(int,void*,void*,size_t,unsigned int) __attribute__((visibility("default")));
int getattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "getattrlist" );
int setattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "setattrlist" );
int exchangedata(const char*,const char*,unsigned int);
int getdirentriesattr(int,void*,void*,size_t,unsigned int*,unsigned int*,unsigned int*,unsigned int);
# 772 "/usr/include/unistd.h" 3 4
struct fssearchblock;
struct searchstate;

int searchfs(const char *, struct fssearchblock *, unsigned long *, unsigned int, unsigned int, struct searchstate *);
int fsctl(const char *,unsigned long,void*,unsigned int);
int ffsctl(int,unsigned long,void*,unsigned int) __attribute__((visibility("default")));

extern int optreset;


# 26 "../lrt/ulnx/io.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 62 "/usr/include/stdio.h" 3 4
#define _STDIO_H_ 







#define _VA_LIST 


typedef __darwin_va_list va_list;
# 85 "/usr/include/stdio.h" 3 4
typedef __darwin_off_t fpos_t;

#define _FSTDIO 
# 96 "/usr/include/stdio.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
# 130 "/usr/include/stdio.h" 3 4
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (*_close)(void *);
 int (*_read) (void *, char *, int);
 fpos_t (*_seek) (void *, fpos_t, int);
 int (*_write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;


extern FILE *__stdinp;
extern FILE *__stdoutp;
extern FILE *__stderrp;


#define __SLBF 0x0001
#define __SNBF 0x0002
#define __SRD 0x0004
#define __SWR 0x0008

#define __SRW 0x0010
#define __SEOF 0x0020
#define __SERR 0x0040
#define __SMBF 0x0080
#define __SAPP 0x0100
#define __SSTR 0x0200
#define __SOPT 0x0400
#define __SNPT 0x0800
#define __SOFF 0x1000
#define __SMOD 0x2000
#define __SALC 0x4000
#define __SIGN 0x8000
# 196 "/usr/include/stdio.h" 3 4
#define _IOFBF 0
#define _IOLBF 1
#define _IONBF 2

#define BUFSIZ 1024
#define EOF (-1)


#define FOPEN_MAX 20
#define FILENAME_MAX 1024



#define P_tmpdir "/var/tmp/"

#define L_tmpnam 1024
#define TMP_MAX 308915776
# 224 "/usr/include/stdio.h" 3 4
#define stdin __stdinp
#define stdout __stdoutp
#define stderr __stderrp
# 238 "/usr/include/stdio.h" 3 4

void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * restrict, fpos_t *);
char *fgets(char * restrict, int, FILE *);



FILE *fopen(const char * restrict, const char * restrict) __asm("_" "fopen" );

int fprintf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
int fputc(int, FILE *);
int fputs(const char * restrict, FILE * restrict) __asm("_" "fputs" );
size_t fread(void * restrict, size_t, size_t, FILE * restrict);
FILE *freopen(const char * restrict, const char * restrict,
                 FILE * restrict) __asm("_" "freopen" );
int fscanf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * restrict, size_t, size_t, FILE * restrict) __asm("_" "fwrite" );
int getc(FILE *);
int getchar(void);
char *gets(char *);
void perror(const char *);
int printf(const char * restrict, ...) __attribute__((__format__ (__printf__, 1, 2)));
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *, const char *);
void rewind(FILE *);
int scanf(const char * restrict, ...) __attribute__((__format__ (__scanf__, 1, 2)));
void setbuf(FILE * restrict, char * restrict);
int setvbuf(FILE * restrict, char * restrict, int, size_t);
int sprintf(char * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
int sscanf(const char * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
FILE *tmpfile(void);
char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE * restrict, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0)));
int vprintf(const char * restrict, va_list) __attribute__((__format__ (__printf__, 1, 0)));
int vsprintf(char * restrict, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0)));

# 294 "/usr/include/stdio.h" 3 4
#define L_ctermid 1024


# 306 "/usr/include/stdio.h" 3 4
FILE *fdopen(int, const char *) __asm("_" "fdopen" );

int fileno(FILE *);

# 318 "/usr/include/stdio.h" 3 4

int pclose(FILE *);



FILE *popen(const char *, const char *) __asm("_" "popen" );


# 340 "/usr/include/stdio.h" 3 4

int __srget(FILE *);
int __svfscanf(FILE *, const char *, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int __swbuf(int, FILE *);






#define __sgetc(p) (--(p)->_r < 0 ? __srget(p) : (int)(*(p)->_p++))

static __inline int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
# 372 "/usr/include/stdio.h" 3 4
#define __sfeof(p) (((p)->_flags & __SEOF) != 0)
#define __sferror(p) (((p)->_flags & __SERR) != 0)
#define __sclearerr(p) ((void)((p)->_flags &= ~(__SERR|__SEOF)))
#define __sfileno(p) ((p)->_file)


void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);



int getw(FILE *);
int putw(int, FILE *);


char *tempnam(const char *, const char *) __asm("_" "tempnam" );



#define getc_unlocked(fp) __sgetc(fp)
#define putc_unlocked(x,fp) __sputc(x, fp)


#define getchar_unlocked() getc_unlocked(stdin)
#define putchar_unlocked(x) putc_unlocked(x, stdout)
# 417 "/usr/include/stdio.h" 3 4

int fseeko(FILE *, off_t, int);
off_t ftello(FILE *);





int snprintf(char * restrict, size_t, const char * restrict, ...) __attribute__((__format__ (__printf__, 3, 4)));
int vfscanf(FILE * restrict, const char * restrict, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int vscanf(const char * restrict, va_list) __attribute__((__format__ (__scanf__, 1, 0)));
int vsnprintf(char * restrict, size_t, const char * restrict, va_list) __attribute__((__format__ (__printf__, 3, 0)));
int vsscanf(const char * restrict, const char * restrict, va_list) __attribute__((__format__ (__scanf__, 2, 0)));

# 445 "/usr/include/stdio.h" 3 4

int dprintf(int, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3))) __attribute__((visibility("default")));
int vdprintf(int, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0))) __attribute__((visibility("default")));
ssize_t getdelim(char ** restrict, size_t * restrict, int, FILE * restrict) __attribute__((visibility("default")));
ssize_t getline(char ** restrict, size_t * restrict, FILE * restrict) __attribute__((visibility("default")));









extern const int sys_nerr;
extern const char *const sys_errlist[];

int asprintf(char **, const char *, ...) __attribute__((__format__ (__printf__, 2, 3)));
char *ctermid_r(char *);
char *fgetln(FILE *, size_t *);
const char *fmtcheck(const char *, const char *);
int fpurge(FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);
int vasprintf(char **, const char *, va_list) __attribute__((__format__ (__printf__, 2, 0)));
FILE *zopen(const char *, const char *, int);





FILE *funopen(const void *,
                 int (*)(void *, char *, int),
                 int (*)(void *, const char *, int),
                 fpos_t (*)(void *, fpos_t, int),
                 int (*)(void *));

#define fropen(cookie,fn) funopen(cookie, fn, 0, 0, 0)
#define fwopen(cookie,fn) funopen(cookie, 0, fn, 0, 0)

#define feof_unlocked(p) __sfeof(p)
#define ferror_unlocked(p) __sferror(p)
#define clearerr_unlocked(p) __sclearerr(p)
#define fileno_unlocked(p) __sfileno(p)
# 499 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/secure/_stdio.h" 1 3 4
# 29 "/usr/include/secure/_stdio.h" 3 4
#define _SECURE__STDIO_H_ 

# 1 "/usr/include/secure/_common.h" 1 3 4
# 25 "/usr/include/secure/_common.h" 3 4
#define _SECURE__COMMON_H_ 

#undef _USE_FORTIFY_LEVEL


#define _USE_FORTIFY_LEVEL 2







#define __darwin_obsz0(object) __builtin_object_size (object, 0)
#define __darwin_obsz(object) __builtin_object_size (object, _USE_FORTIFY_LEVEL > 1)
# 32 "/usr/include/secure/_stdio.h" 2 3 4



#undef sprintf
#undef vsprintf


#undef snprintf
#undef vsnprintf




extern int __sprintf_chk (char * restrict, int, size_t,
     const char * restrict, ...)
  ;

#define sprintf(str,...) __builtin___sprintf_chk (str, 0, __darwin_obsz(str), __VA_ARGS__)


extern int __snprintf_chk (char * restrict, size_t, int, size_t,
      const char * restrict, ...)
  ;


#define snprintf(str,len,...) __builtin___snprintf_chk (str, len, 0, __darwin_obsz(str), __VA_ARGS__)


extern int __vsprintf_chk (char * restrict, int, size_t,
      const char * restrict, va_list)
  ;

#define vsprintf(str,format,ap) __builtin___vsprintf_chk (str, 0, __darwin_obsz(str), format, ap)


extern int __vsnprintf_chk (char * restrict, size_t, int, size_t,
       const char * restrict, va_list)
  ;

#define vsnprintf(str,len,format,ap) __builtin___vsnprintf_chk (str, len, 0, __darwin_obsz(str), format, ap)
# 500 "/usr/include/stdio.h" 2 3 4
# 27 "../lrt/ulnx/io.h" 2

#define EBB_LRT_printf printf
#define EBB_LRT_write write

int
EBB_LRT_getBootInfoPage(char *, int *size);
# 29 "../lrt/io.h" 2
# 46 "../apps/ssac/ssac.c" 2


# 1 "../l1/App.h" 1

#define __APP_H__ 
# 25 "../l1/App.h"
typedef struct App_obj App; typedef App * AppRef; struct App_obj { struct App_if *ft; }; typedef AppRef *AppId; struct App_if {






  EBBRC (*start) (AppRef _self, int argc, char **argv,
    char **environ);
};


extern AppId theAppId;

extern EBBRep * App_createRep(CObjEBBRootMultiRef _self);

#define APP(REPTYPE) EBBRep * App_createRep(CObjEBBRootMultiRef _self) { REPTYPE * repRef; EBBPrimMalloc(sizeof(REPTYPE), &repRef, EBB_MEM_DEFAULT); repRef->ft = &REPTYPE ## _ftable; return (EBBRep *)repRef; }
# 49 "../apps/ssac/ssac.c" 2


typedef struct SSAC_obj SSAC; typedef SSAC * SSACRef; struct SSAC_obj {
  struct App_if *ft;
};


static void
dumpArgsAndEnviron(int argc, char **argv, char **environ)
{
  int i;
  for (i=0; i<argc; i++) printf("argv[%d]=%s\n", i, argv[i]);
  for (i=0; environ[i]!=((void *)0); i++) printf("environ[%d]=%s\n",
        i, environ[i]);
}


EBBRC
SSAC_start(AppRef _self, int argc, char **argv,
   char **environ)
{
  printf("SSAC LOADED\n");
  dumpArgsAndEnviron(argc, argv, environ);
  printf("%s: PASSED\n", argv[0]);
  return EBBRC_OK;
}


struct App_if SSAC_ftable = {
  .start = SSAC_start
};


EBBRep * App_createRep(CObjEBBRootMultiRef _self) { SSAC * repRef; EBBPrimMalloc(sizeof(SSAC), &repRef, EBB_MEM_DEFAULT); repRef->ft = &SSAC_ftable; return (EBBRep *)repRef; };
