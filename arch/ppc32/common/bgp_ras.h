/* begin_generated_IBM_copyright_prolog                             */
/*                                                                  */
/* This is an automatically generated copyright prolog.             */
/* After initializing,  DO NOT MODIFY OR MOVE                       */
/*  --------------------------------------------------------------- */
/*                                                                  */
/* (C) Copyright IBM Corp.  2007, 2007                              */
/* IBM CPL License                                                  */
/*                                                                  */
/*  --------------------------------------------------------------- */
/*                                                                  */
/* end_generated_IBM_copyright_prolog                               */
/**
 * \file common/bgp_ras.h
 */

#ifndef	_BGP_RAS_H_ // Prevent multiple inclusion
#define	_BGP_RAS_H_



#include <common/namespace.h>

__BEGIN_DECLS

#include <common/linkage.h>
#include <common/bgp_bitnumbers.h>
#include <bpcore/bgp_types.h>

//
// Rules:
//  0) This header file is parsed by host code to generate the error tables.
//
//  1) All unit enum's must be of the form: _bgp_unit_[unit-name].
//
//  2) For each unit, there must be an enum showing error codes of the form:
//       _BGP_RAS_[unit-name]_ErrCodes;
//
//  3) The enum's for error codes must be of the form:
//       typedef enum {
//                    _bgp_err_[unit-name]_none = 0, // required
//                    ...                            // error codes must be dense and sequential
//                    _bgp_err_[unit-name]_max       // required
//                    }
//                    _BGP_RAS_[unit-name]_ErrCodes;
//
//  4) For each error code, (optionally) create a file in the directory
//       "$BGPHOME/bgp/control/ras/decoder/" with the name in the form:
//       "_bgp_err_[error-code-enum].cc".
//     The generator will check if such a file exists and hook it into the table.
//     These functions will be called to decode/process a RAS Event generated by the kernel.
//
//  5) Inside the file "_bgp_err_[error-code-enum].cc" create a function of the form:
//
//     void RAS_Decoder_[error-code-enum]( _BGP_RAS_Event_t *pRAS_Ev,
//                                         RasEvent& event )
//
//     Eg, to handle the error _bgp_unit_ppc450:_bgp_err_ppc450_l1d_upe,
//     create the function named: "RAS_Decoder_ppc450_l1d_upe()" matching
//     the above signature.
//

// List of event severities
// Please note these match the severities found in bgp/control/ras/RasEvent.h
typedef enum {
                        _bgp_sev_none = 0,

			_bgp_sev_trace,

			_bgp_sev_debug,	// designates fine-grained informational events that are most useful to debug code.
			_bgp_sev_info,  // designates informational messages that highlight the progress of system software.
			_bgp_sev_warn, 	// designates potentially harmful situations like a soft error threshold being exceeded.
			_bgp_sev_error, // designates error events that might still allow the application to continue running like failure of a redundant component.
			_bgp_sev_fatal, // designates very severe error events that will presumably lead the application to abort.
			_bgp_sev_unknown, // the severity is not known

			_bgp_sev_max 
		} _BGP_Severity;	

// List of all BGP facilities (high level component detecting the condition)
// NOTE: These need to correspond to the components defined in bgp/control/ras/RasEvent.h
typedef enum {

             // Facilities
             _bgp_fac_none          = 0x00,

             _bgp_fac_kernel        = 0x01, 
             _bgp_fac_application   = 0x02,
             _bgp_fac_card          = 0x03,
             _bgp_fac_mc            = 0x04,
             _bgp_fac_mcserver      = 0x05,
             _bgp_fac_mmcs          = 0x06,
             _bgp_fac_diags         = 0x07,

             _bgp_fac_max
             } _BGP_Facility;


// List of all BGP units that can generate RAS events
typedef enum {
             _bgp_unit_none         = 0x00,

             // hardware detected events
             _bgp_unit_ppc450       = 0x01,
             _bgp_unit_fpu          = 0x02,
             _bgp_unit_snoop        = 0x03,
             _bgp_unit_dp0          = 0x04,
             _bgp_unit_dp1          = 0x05,
             _bgp_unit_l2           = 0x06,
             _bgp_unit_l3           = 0x07,
             _bgp_unit_ddr          = 0x08,
             _bgp_unit_sram         = 0x09,
             _bgp_unit_dma          = 0x0A,
             _bgp_unit_testint      = 0x0B,
             _bgp_unit_testint_dcr  = 0x0C,
             _bgp_unit_lockbox      = 0x0D,
             _bgp_unit_plb          = 0x0E,
             _bgp_unit_collective   = 0x0F,
             _bgp_unit_torus        = 0x10,
             _bgp_unit_globint      = 0x11,
             _bgp_unit_serdes       = 0x12,
             _bgp_unit_upc          = 0x13,
             _bgp_unit_dcr          = 0x14,
             _bgp_unit_bic          = 0x15,
             _bgp_unit_devbus       = 0x16,
             _bgp_unit_netbus       = 0x17,
             _bgp_unit_envmon       = 0x18,
             _bgp_unit_tomal        = 0x19,
             _bgp_unit_xemac        = 0x1A,
             _bgp_unit_phy          = 0x1B,

             // software detected events/problems
             _bgp_unit_bootloader   = 0x1C,
             _bgp_unit_kernel       = 0x1D,
             _bgp_unit_ciod         = 0x1E,
             _bgp_unit_svc_host     = 0x1F,
             _bgp_unit_diagnostic   = 0x20,
             _bgp_unit_application  = 0x21,
             _bgp_unit_linux	    = 0x22,
	     _bgp_unit_cns          = 0x23, // Common Node Services
	     _bgp_unit_ethernet     = 0x24,
             _bgp_unit_max          = 0xFF
             }
             _BGP_RAS_Units;


typedef enum {
             _bgp_err_ppc450_none      = 0x00,

             _bgp_err_ppc450_l1i       = 0x01, // Generic L1-I Error
             _bgp_err_ppc450_l1d       = 0x02, // Generic L1-D Error
             _bgp_err_ppc450_l1d_upe   = 0x03, // U bits Parity Error
             _bgp_err_ppc450_l1d_tpe0  = 0x04, // Tag bits (address) Parity Error Bit 0
             _bgp_err_ppc450_l1d_tpe1  = 0x05, // Tag bits (address) Parity Error Bit 1
             _bgp_err_ppc450_l1d_dpe0  = 0x06, // Data Parity Error in Check Bit 0
             _bgp_err_ppc450_l1d_dpe1  = 0x07, // Data Parity Error in Check Bit 1
             _bgp_err_ppc450_l1d_dpe2  = 0x08, // Data Parity Error in Check Bit 2
             _bgp_err_ppc450_l1d_dpe3  = 0x09, // Data Parity Error in Check Bit 3
             _bgp_err_ppc450_l1d_mpe0  = 0x0A, // Modified (dirty) bits Parity Error in bit 0
             _bgp_err_ppc450_l1d_mpe1  = 0x0B, // Modified (dirty) bits Parity Error in bit 1
             _bgp_err_ppc450_l1d_mpe2  = 0x0C, // Modified (dirty) bits Parity Error in bit 2
             _bgp_err_ppc450_l1d_mpe3  = 0x0D, // Modified (dirty) bits Parity Error in bit 3
             _bgp_err_ppc450_l1d_mhit  = 0x0E, // Multi-Hit Error: 2 or more lines with same physical address
             _bgp_err_ppc450_tlb       = 0x0F,
             _bgp_err_ppc450_plb       = 0x10,
             _bgp_err_ppc450_l1d_mpe_multi  = 0x11, // Modified (dirty) bits Parity Error.  Multiple bits in error.
             _bgp_err_ppc450_l1d_dpe_multi  = 0x12, // Data Parity Error.  Multiple bytes in error.
             _bgp_err_ppc450_l1d_tpe_multi  = 0x13, // Tag Parity Error.  Multiple bytes in error.
	     _bgp_err_ppc450_l1i_tpe0  = 0x14,
	     _bgp_err_ppc450_l1i_tpe1  = 0x15,
	     _bgp_err_ppc450_l1i_tpe_multi = 0x16,
	     _bgp_err_ppc450_l1i_iwpe = 0x17,
	     _bgp_err_ppc450_tlbentry = 0x18,
	     _bgp_err_ppc450_tlboverlap = 0x19,
	     _bgp_err_ppc450_tlbentdump = 0x20,
             _bgp_err_ppc450_max       = 0xFF
             }
             _BGP_RAS_PPC450_ErrCodes;


typedef enum {
             _bgp_err_torus_none        = 0x00,
             _bgp_err_torus_fatal_sum   = 0x01,  //  summary of all torus fatal errors
             _bgp_err_torus_vc_not_empty       = 0x0F,  //  receiver vc is not empty
	     _bgp_err_torus_send_tokens        = 0x10,  //  sender tokens not all accounted for
             _bgp_err_torus_retran_not_empty   = 0x11,  //  sender retransmission fifo is not empty
             _bgp_err_torus_inj_fifo_not_empty = 0x12,  //  processor injection fifo is not empty
             _bgp_err_torus_rec_fifo_not_empty = 0x13,  //  processor reception fifo is not empty
             _bgp_err_torus_sender_retran      = 0x14,  //  number of sender retransmissions
             _bgp_err_torus_receiver_errors    = 0x15,  //  number of receiver correctable errors
                                               //  DO NOT CHANGE ORDER OF THESE BELOW

             _bgp_err_torus_xp_crc_miscompare  = 0x16,  //  CRC of x plus receiver on this node does not equal CRC of corresponding x minus sender
             _bgp_err_torus_xm_crc_miscompare  = 0x17,  //  CRC of x minus receiver on this node does not equal CRC of corresponding x plus sender
             _bgp_err_torus_yp_crc_miscompare  = 0x18, //  CRC of y plus receiver on this node does not equal CRC of corresponding y minus sender
             _bgp_err_torus_ym_crc_miscompare  = 0x19, //  CRC of y minus receiver on this node does not equal CRC of corresponding y plus sender
             _bgp_err_torus_zp_crc_miscompare  = 0x1A, //  CRC of z plus receiver on this node does not equal CRC of corresponding z minus sender
             _bgp_err_torus_zm_crc_miscompare  = 0x1B,  //  CRC of z minus receiver on this node does not equal CRC of corresponding z plus sender
                                               //  DO NOT CHANGE ORDER OF THESE ABOVE
             _bgp_err_torus_send_sram_corr_err = 0x1C,   //  Torus correctable errors in sender sram
             _bgp_err_torus_recv_sram_corr_err = 0x1D,   //  Torus correctable errors in receiver sram
             _bgp_err_torus_rand_corr_err      = 0x1E,   //  Torus correctable errors in random generator
             _bgp_err_torus_inj_sram_corr_err  = 0x1F,   //  Torus correctable errors in injection sram
             _bgp_err_torus_rec_sram_corr_err  = 0x20,   //  Torus correctable errors in reception sram
             _bgp_err_torus_hdrfull_corr_err   = 0x21,   //  Torus correctable errors hdrfull, link receiver error caught by non-crc check 
             _bgp_err_torus_vcfifofull_corr_err = 0x22,   //  Torus correctable errors vcfifofull, link receiver error causes full fifo
	     _bgp_err_torus_capture_error1      = 0x23,   //  Error in Torus Bad Packet Capture Unit, error in capture unit 
	     _bgp_err_torus_capture_error2      = 0x24,   //  Error in Torus Bad Packet Capture Unit, status difference betweeen initial and subsequent reads
	     _bgp_err_torus_capture_error3      = 0x25,   //  Error in Torus Bad Packet Capture Unit, bad packet captured, but all bytes the same. 
	     _bgp_err_torus_capture_error4      = 0x26,   //  Error in Torus Bad Packet Capture Unit, good and bad packet sizes do not agree, possible CRC escape
	     _bgp_err_torus_capture_single_bit  = 0x27,   //  Torus Bad Packet Capture Unit captures a packet with a single bit error
	     _bgp_err_torus_capture_multi_bit   = 0x28,   //  Torus Bad Packet Capture Unit captures a packet with a multiple bit errors, potential CRC escape
	     _bgp_err_torus_crc_exchg_timeout   = 0x29,   //  Torus CRC Exchange timeout

            _bgp_err_torus_max       = 0xFF
             }
             _BGP_RAS_Torus_ErrCodes;



typedef enum T_BGP_RAS_Serdes_ErrCodes
{
             _bgp_err_serdes_none           = 0x00,
             _bgp_err_serdes_xp             = 0x01,    // torus x plus  receiver serdes training error
             _bgp_err_serdes_xm             = 0x02,    // torus x minus receiver serdes training error
             _bgp_err_serdes_yp             = 0x03,    // torus y plus  receiver serdes training error
             _bgp_err_serdes_ym             = 0x04,    // torus y minus receiver serdes training error
             _bgp_err_serdes_zp             = 0x05,    // torus z plus  receiver serdes training error
             _bgp_err_serdes_zm             = 0x06,    // torus z minus receiver serdes training error
             _bgp_err_serdes_a0             = 0x07,    // collective a0 receiver serdes training error
             _bgp_err_serdes_a1             = 0x08,    // collective a1 receiver serdes training error
             _bgp_err_serdes_b0             = 0x09,    // collective b0 receiver serdes training error
             _bgp_err_serdes_b1             = 0x0A,    // collective b1 receiver serdes training error
             _bgp_err_serdes_c0             = 0x0B,    // collective c0 receiver serdes training error
             _bgp_err_serdes_c1             = 0x0C,    // collective c1 receiver serdes training error
             _bgp_err_serdes_rc_not0        = 0x0D,    // non-zero rc in serdes but all links train  	     
             _bgp_err_serdes_2byte_a        = 0x0E,    // two byte align Collecvite A serdes training error   
             _bgp_err_serdes_2byte_b        = 0x0F,    // two byte align Collecvite B serdes training error   
             _bgp_err_serdes_2byte_c        = 0x10,    // two byte align Collecvite C serdes training error
	     _bgp_err_serdes_fatal          = 0x11,    // Fatal Serdes Training Error, reported if any of above are reported 

             _bgp_err_serdes_max            = 0xFF
} BGP_RAS_Serdes_ErrCodes;


typedef enum T_BGP_RAS_UPC_ErrCodes
{
   _bgp_err_upc_none           = 0x00,
   _bgp_err_upc_inputparity    = 0x01,
   _bgp_err_upc_addrparity     = 0x02,
   _bgp_err_upc_buserror       = 0x03,
   _bgp_err_upc_sramparity     = 0x04,
   _bgp_err_upc_busctrlparity  = 0x05,
   _bgp_err_upc_max            = 0xFF
} BGP_RAS_UPC_ErrCodes;






typedef enum {
//           12345678901234567890123456789012 All names must be less than 32 characters.
                                               //  DO NOT CHANGE ORDER OF THESE BELOW
             _bgp_err_collective_none          = 0x00,

             _bgp_err_collective_Salu          = 0x01, // tr_alu single-node diagnostic failed. Replace this node hardware.

             _bgp_err_collective_Secc_putget   = 0x02, // tr_ecc single-node diagnostic failed. Replace this node hardware.
             _bgp_err_collective_Secc_corrupt  = 0x03, // tr_ecc single-node diagnostic failed. Replace this node hardware.
             _bgp_err_collective_Secc_UE       = 0x04, // tr_ecc single-node diagnostic failed. Replace this node hardware.
             _bgp_err_collective_Secc_payload  = 0x32, // tr_ecc single-node diagnostic failed. Replace this node hardware.


             _bgp_err_collective_Stwo_bad      = 0x05, // tr_two_core single-node diagnostic failed. Replace this node hardware.
             _bgp_err_collective_Stwo_status   = 0x06, // tr_two_core single-node diagnostic failed. Replace this node hardware.
             _bgp_err_collective_Stwo_crc1     = 0x08, // tr_two_core single-node diagnostic failed with SerDes error injection. Replace this node hardware.

             _bgp_err_collective_Mbad_link     = 0x09, // tr_and_dma_connectivity multi-node diagnostic failed. Replace hardware associated with the specified link.
             _bgp_err_collective_Mbad_pkt      = 0x2F, // tr_and_dma_connectivity multi-node diagnostic failed. Replace hardware associated with the specified link.
             _bgp_err_collective_Mbad_neighbor = 0x31, // tr_and_dma_connectivity multi-node diagnostic failed. Replace hardware associated with the specified link.

	     _bgp_err_collective_resync        = 0x07, // tree resync monitor failed.  Replace node.

	     _bgp_err_collective_RouterTimeOut = 0x0A, // Router TimeOut
	     _bgp_err_collective_NoTargetTrap  = 0x0B, // No Target Trap
	     _bgp_err_collective_ALUOverFlow   = 0x0C, // ALU Overflow
	     _bgp_err_collective_LocalInjection = 0x0D, // Local Injection
	     _bgp_err_collective_LocalReception = 0x0E, // Local Reception
	     _bgp_err_collective_WriteToFullCh0 = 0x0F, // Write to Full Channel 0 
	     _bgp_err_collective_ECCExceptCh0Snd = 0x10, // ECC Exception Channel 0 Send
	     _bgp_err_collective_LinkCRCExceptCh0Snd = 0x11, // Link CRC Exception Channel 0 Send
	     _bgp_err_collective_WriteToFullCh1 = 0x12, // Write to Full Channel 1
	     _bgp_err_collective_ECCExceptCh1Snd = 0x13, // ECC Exception Channel 1 Send
	     _bgp_err_collective_LinkCRCExceptCh1Snd = 0x14, // Link CRC Exception Channel 1 Send
	     _bgp_err_collective_WriteToFullCh2 = 0x15, // Write to Full Channel 2
	     _bgp_err_collective_ECCExceptCh2Snd = 0x16, // ECC Exception Channel 2 Send
	     _bgp_err_collective_LinkCRCExceptCh2Snd = 0x17, // Link CRC Exception Channel 2 Send
	     _bgp_err_collective_ECCExceptCh0Rcv = 0x18, // ECC Exception Channel 0 Receive
	     _bgp_err_collective_LinkCRCExceptCh0Rcv = 0x19, // Link CRC Exception Channel 0 Receive
	     _bgp_err_collective_ECCExceptCh1Rcv = 0x1A, // ECC Exception Channel 1 Receive
 	     _bgp_err_collective_LinkCRCExceptCh1Rcv = 0x1B, // Link CRC Exception Channel 1 Receive
	     _bgp_err_collective_ECCExceptCh2Rcv = 0x1C, // ECC Exception Channel 2 Receive
 	     _bgp_err_collective_LinkCRCExceptCh2Rcv = 0x1D, // Link CRC Exception Channel 2 Receive
//    _bgp_err_collective_InjectionExcept = 0x1E, // Collective Injection Exception
//    _bgp_err_collective_ReceptionExcept = 0x1F, // Collective Reception Exception
	     _bgp_err_collective_Recv0_SEC = 0x20, // RCV0: Sram Error Corrected Threshold Exceeded
	     _bgp_err_collective_Recv0_CRC = 0x21, // RCV0: CRC Threshold Exceeded
	     _bgp_err_collective_Send0_SEC = 0x22, // SND0: Sram Error Corrected Threshold Exceeded
	     _bgp_err_collective_Send0_Retry = 0x23, // SND0: Retry Threshold Exceeded
	     _bgp_err_collective_Recv1_SEC = 0x24, // RCV1: Sram Error Corrected Threshold Exceeded
	     _bgp_err_collective_Recv1_CRC = 0x25, // RCV1: CRC Threshold Exceeded
	     _bgp_err_collective_Send1_SEC = 0x26, // SND1: Sram Error Corrected Threshold Exceeded
	     _bgp_err_collective_Send1_Retry = 0x27, // SND1: Retry Threshold Exceeded
 	     _bgp_err_collective_Recv2_SEC = 0x28, // RCV2: Sram Error Corrected Threshold Exceeded
	     _bgp_err_collective_Recv2_CRC = 0x29, // RCV2: CRC Threshold Exceeded
	     _bgp_err_collective_Send2_SEC = 0x2A, // SND2: Sram Error Corrected Threshold Exceeded
	     _bgp_err_collective_Send2_Retry = 0x2B, // SND2: Retry Threshold Exceeded
	     _bgp_err_collective_INJ_SEC = 0x2C, // INJ: Sram Error Corrected Threshold Exceeded
	     _bgp_err_collective_REC_SEC = 0x2D, // REC: Sram Error Corrected Threshold Exceeded 
       _bgp_err_collective_Stwo_crc2     = 0x2E, // tr_two_core single-node diagnostic failed without SerDes error injection. Replace this node hardware.

             _bgp_err_collective_CRConBoot     = 0x30, // On boot, CRC counters show receiver stuck in resync

	     _bgp_err_collective_lcl_fifos_not_empty = 0x33,
	     _bgp_err_collective_rcv_fifos_not_empty = 0x34,
	     // LAST USED NUMBER SO FAR IS 0x34

                                               //  DO NOT CHANGE ORDER OF THESE ABOVE

             _bgp_err_collective__max       = 0xFF
//           12345678901234567890123456789012 All names must be less than 32 characters.
             }
             _BGP_RAS_Collective_ErrCodes;

typedef enum {
             _bgp_err_dma_none                   = 0x00,
             _bgp_err_dma_range_inj              = 0x01, // error in configuration of injection ranges and/or tlb bits
             _bgp_err_dma_range_rec              = 0x02, // error in configuration of reception ranges and/or tlb bits
             _bgp_err_dma_sram_init              = 0x03, // error in sram read during initialization
             _bgp_err_dma_rfifo_map_twice        = 0x0C, // error - called _bgp_DMA_RecFifoSetMap more than once software error
             _bgp_err_dma_fatal_sum              = 0x14, // fatal error summary bit is non-zero
             _bgp_err_dma_state_0                = 0x1A, // state machines not idle,  _BGP_DCR_DMA_INTERNAL_STATE(0)
             _bgp_err_dma_state_1                = 0x1B, // state machines not idle,  _BGP_DCR_DMA_INTERNAL_STATE(1)
             _bgp_err_dma_ce_0                   = 0x1C, // corectable error over threshold,  _BGP_DCR_DMA_CE_COUNT(0)
             _bgp_err_dma_ce_1                   = 0x1D, // corectable error over threshold,  _BGP_DCR_DMA_CE_COUNT(1)
             _bgp_err_dma_ce_2                   = 0x1E, // corectable error over threshold,  _BGP_DCR_DMA_CE_COUNT(2)
             _bgp_err_dma_ce_3                   = 0x1F, // corectable error over threshold,  _BGP_DCR_DMA_CE_COUNT(3)
             _bgp_err_dma_ce_4                   = 0x20, // corectable error over threshold,  _BGP_DCR_DMA_CE_COUNT(4)
             _bgp_err_dma_ce_5                   = 0x21, // corectable error over threshold,  _BGP_DCR_DMA_CE_COUNT(5)
             _bgp_err_dma_ce_6                   = 0x22, // corectable error over threshold,  _BGP_DCR_DMA_CE_COUNT(6)
             _bgp_err_dma_ce_7                   = 0x23, // corectable error over threshold,  _BGP_DCR_DMA_CE_COUNT(7)
             _bgp_err_dma_ce_8                   = 0x24, // corectable error over threshold,  _BGP_DCR_DMA_CE_COUNT(8)
             _bgp_err_dma_pque_pointer           = 0x25, // processor  queue not empty, _BGP_DCR_DMA_PQUE_POINTER
             _bgp_err_dma_local_fifo_pointer     = 0x26, // local fifo queue not empty, _BGP_DCR_DMA_LOCAL_FIFO_POINTER
             _bgp_err_dma_inj_counter_not_enabled = 0x27, // dma injection counter not enabled
             _bgp_err_dma_inj_0byte_message      = 0x28, // dma injection 0 message length descriptor
             _bgp_err_dma_inj_counter_underflow  = 0x29, // dma injection counter underflow
             _bgp_err_dma_inj_counter_overflow   = 0x2A, // dma injection counter overflow
             _bgp_err_dma_rec_fifo_not_avail     = 0x2B, // dma reception fifo not enabled or not available
             _bgp_err_dma_rec_hdr_fifo_not_avail = 0x2C, // dma reception header fifo not enabled or not available
             _bgp_err_dma_inj_fifo_not_avail     = 0x2D, // dma injection fifo not enabled or not available for remote get
             _bgp_err_dma_rec_counter_not_enabled = 0x2E, // dma reception counter not enabled
             _bgp_err_dma_rec_counter_underflow  = 0x2F,  // dma reception counter underflow
             _bgp_err_dma_rec_counter_overflow   = 0x30,  // dma reception counter overflow
             _bgp_err_dma_pque0_byte_en          = 0x31,  // dp0 writes less than 32B to DMA, probable sw error, report x,y,z dcr address and  dma address written
             _bgp_err_dma_pque0_inv_write_addr   = 0x32,  // dp0 writes to an invalid DMA address, probable sw error, report x,y,z dcr address and dma address written //
             _bgp_err_dma_pque0_inv_read_addr    = 0x33,  // dp0 reads an invalid DMA address, probable sw error, report x,y,z dcr address and dma address read
             _bgp_err_dma_pque1_byte_en          = 0x34,  // dp1 writes less than 32B to DMA, probable sw error, report x,y,z dcr address and  dma address written
             _bgp_err_dma_pque1_inv_write_addr   = 0x35,  // dp1 reads an invalid DMA address, probable sw error, report x,y,z dcr address and dma address read
             _bgp_err_dma_pque1_inv_read_addr    = 0x36,  // dp1 reads an invalid DMA address, probable sw error, report x,y,z dcr address and dma address read
	     _bgp_err_dma_read_range             = 0x3C,  // read from address not in one of dcr address ranges
	     _bgp_err_dma_max_address            = 0x3D,  // write address exceeds the counter max
	     _bgp_err_dma_write_range            = 0x3E,  // write to address not in one of dcr address ranges
	     _bgp_err_dma_invalid_injection      = 0x40,  // local packet injected into torus fifo, or torus packet injected into local fifo	     
	     _bgp_err_dma_paddr                  = 0x41,  // DMA physical addressing error
             _bgp_err_dma_max                    = 0xFF
             }
             _BGP_RAS_DMA_ErrCodes;

typedef enum {
             _bgp_err_netbus_none               = 0x00,

             _bgp_err_netbus_fatal              = 0x01, // need real errs

             _bgp_err_netbus_dcr_miscompare     = 0x02,
	     _bgp_err_netbus_dp0_load_tokens    = 0x03, // the number of dp0_load_tokens does not equal expected value, report dcr address, dcr value, expected dcr value
	     _bgp_err_netbus_dp1_load_tokens    = 0x04, // the number of dp1_load_tokens does not equal expected value, report dcr address, dcr value, expected dcr value
	     _bgp_err_netbus_dp0_enable         = 0x05, // the dp0_enable dcr doess not equal expected value, report dcr address, dcr value, expected dcr value
	     _bgp_err_netbus_dp1_enable         = 0x06, // the dp1_enable dcr doess not equal expected value, report dcr address, dcr value, expected dcr value
	     _bgp_err_netbus_dp0_available_tokens = 0x07, // the number of dp0 available_tokens does not equal expected value, report dcr address, dcr value, expected dcr value
	     _bgp_err_netbus_dp1_available_tokens = 0x08, // the number of dp1 available_tokens does not equal expected value, report dcr address, dcr value, expected dcr value
	     _bgp_err_netbus_dp0_out_reads_err    = 0x09, // the number of dp0 outstanding reads does not equal expected value or protocol error, report dcr address, masked dcr value, expected masked dcr value
	     _bgp_err_netbus_dp1_out_reads_err    = 0x0A, // the number of dp1 outstanding reads does not equal expected value or protocol error, report dcr address, masked dcr value, expected masked dcr value
             _bgp_err_netbus_max                  = 0xFF
             }
             _BGP_RAS_NetBus_ErrCodes;

typedef enum {
             _bgp_err_bootloader_none       = 0x00,

             _bgp_err_bootloader_crash_CI   = 0x01, // Unexpected and unhandled Critical Interrupt.
             _bgp_err_bootloader_crash_MCK  = 0x02, // Unexpected and unhandled Machine Check.
             _bgp_err_bootloader_crash_DSI  = 0x03, // Unexpected and unhandled Data Storage Interrupt.
             _bgp_err_bootloader_crash_ISI  = 0x04, // Unexpected and unhandled Instruction Storage Interrupt.
             _bgp_err_bootloader_crash_EI   = 0x05, // Unexpected and unhandled External Interrupt.
             _bgp_err_bootloader_crash_ALGN = 0x06, // Unexpected and unhandled Alignment Exception.
             _bgp_err_bootloader_crash_PE   = 0x07, // Unexpected and unhandled Program Exception, likely due to invalid instruction fetch.
             _bgp_err_bootloader_crash_FPU  = 0x08, // Unexpected and unhandled Floating Point Unavailable exception.
             _bgp_err_bootloader_crash_SYSC = 0x09, // Unexpected and unhandled SystemCall.
             _bgp_err_bootloader_crash_APU  = 0x0A, // Unexpected and unhandled Auxilliary Processor Unavailable interrupt.
             _bgp_err_bootloader_crash_PIT  = 0x0B, // Unexpected and unhandled Programmable Interval Timer interrupt.
             _bgp_err_bootloader_crash_FIT  = 0x0C, // Unexpected and unhandled Fixed Interval Timer interrupt.
             _bgp_err_bootloader_crash_WDI  = 0x0D, // Unexpected and unhandled WatchDog Interrupt.
             _bgp_err_bootloader_crash_DTLB = 0x0E, // Unexpected and unhandled Data TLB fault.
             _bgp_err_bootloader_crash_ITLB = 0x0F, // Unexpected and unhandled Instruction TLB fault.
             _bgp_err_bootloader_crash_DBG  = 0x10, // Unexpected and unhandled Debug Interrupt.

             _bgp_err_bootloader_crash_SRAM_CRC = 0x11, // Bootloader CRC incorrect, likely invalid bootloader installation.
             _bgp_err_bootloader_crash_PERS_CRC = 0x12, // Personality CRC Error.
             _bgp_err_bootloader_crash_PERS_VER = 0x13, // Personality Version Mismatch
             _bgp_err_bootloader_crash_CORE_ID  = 0x14, // PPC450 reports Physical Processor ID (PIR) greater than 3.
	     _bgp_err_bootloader_crash_ELF_CRC  = 0x15, // CRC32 check of the ELF section miscompared
             _bgp_err_bootloader_max            = 0xFF 
             }
             _BGP_RAS_BootLoader_ErrCodes;

typedef enum {
    _bgp_err_ddr_none                 = 0x00,
    _bgp_err_ddr_addr_parity_err      = 0x01, // address parity error 
    _bgp_err_ddr_single_symbol_error  = 0x02, // ECC-correctable single symbol error
    _bgp_err_ddr_double_symbol_error  = 0x03, // ECC-correctable double symbol error
    _bgp_err_ddr_chipkill_error       = 0x04, // ECC-correctable chipkill error
    _bgp_err_ddr_uncorrectable_error  = 0x05, // ECC-uncorrectable error
    _bgp_err_ddr_miscompare           = 0x06, // miscompare during IPL diag
    _bgp_err_ddr_bitfail              = 0x07, // reports strange behavior of a single bit (stuck, bad) as found during test_ddr_bitfail
    _bgp_err_ddr_mchk                 = 0x08, // a ddr controller raised a machine check
    _bgp_err_ddr_rbs_activated        = 0x09, // ddr redundant bit steering was activated
    _bgp_err_ddr_SSE_count            = 0x0A, // sse error count
    _bgp_err_ddr_DSE_count            = 0x0B, // dse error count
    _bgp_err_ddr_CK_count             = 0x0C, // chipkill error count
    _bgp_err_ddr_special_attention    = 0x0D, // Abnormal Special Attention event
    _bgp_err_ddr_max                  = 0xFF
} _BGP_RAS_DDR_ErrCodes;



//
// TOMAL RAS Error Codes                                 
//
typedef enum T_BGP_RAS_TOMAL_ErrCodes 
{
             _bgp_err_tomal_none                = 0x00,

             _bgp_err_tomal_soft_reset          = 0x01, // TOMAL Soft Reset Error (Self clearing bit).
             _bgp_err_tomal_write_register      = 0x02, // TOMAL write register (read back) failure.
             _bgp_err_tomal_desc_alignment      = 0x03, // TOMAL Descriptor Aligment Error
             _bgp_err_tomal_WBstatus_timeout    = 0x04, // TOMAL WB Status bit (not set)
             _bgp_err_tomal_rx_int_timeout      = 0x05, // TOMAL rx interrupt timeout
             _bgp_err_tomal_tx_int_timeout      = 0x06, // TOMAL tx interrupt timeout
             _bgp_err_tomal_int_unexpected      = 0x07, // TOMAL unexpected interrupt
             _bgp_err_tomal_rx_timeout          = 0x08, // TOMAL timeout during reception

             _bgp_err_tomal_max                 = 0xFF

} _BGP_RAS_TOMAL_ErrCodes;




//
// XEMAC RAS Error Codes                                 
//
typedef enum T_BGP_RAS_XEMAC_ErrCodes
{ 
             _bgp_err_xemac_none            = 0x00,

             _bgp_err_xemac_por             = 0x01, // XEMAC Power-Reset Error
             _bgp_err_xemac_write_register  = 0x02, // XEMAC write register (read back) failure.

             _bgp_err_xemac_mdio_op_timeout = 0x10, // XEMAC mdio operation timeout

             _bgp_err_xemac_max             = 0xFF

} _BGP_RAS_XEMAC_ErrCodes;




//
// PHY RAS Error Codes                                 
//
typedef enum T_BGP_RAS_PHY_ErrCodes
{
             _bgp_err_phy_none           = 0x00,

             _bgp_err_phy_por            = 0x01, // PHY Power-Reset Error
             _bgp_err_phy_write_register = 0x02, // PHY write register (read back) failure.

             _bgp_err_serdes_hss_write_register = 0x10, // SERDES HSS 

             _bgp_err_phy_max            = 0xFF

} _BGP_RAS_PHY_ErrCodes;

typedef enum T_BGP_RAS_L3_ErrCodes
  {
    _bgp_err_l3_none              = 0x00,
    _bgp_err_l3_mchk              = 0x01,
    _bgp_err_l3_readparity        = 0x02,
    _bgp_err_l3_readaddress       = 0x03,
    _bgp_err_l3_writeparity       = 0x04,
    _bgp_err_l3_writeaddress      = 0x05,
    _bgp_err_l3_writedmaaddress   = 0x06,
    _bgp_err_l3_correctable       = 0x07,
    _bgp_err_l3_uncorrectable_err = 0x08, // used in diag tests
    _bgp_err_l3_correctable_err   = 0x09, // used in diag tests
    _bgp_err_l3_parity_err        = 0x0A, // used in diag tests
    _bgp_err_l3_correctable_edram = 0x0B,
    _bgp_err_l3_correctable_dir   = 0x0C,
    _bgp_err_l3_max               = 0xFF
  } _BGP_RAS_L3_ErrCodes;

typedef enum T_BGP_RAS_Snoop_ErrCodes
  {
    _bgp_err_snoop_none               = 0x00,
    _bgp_err_snoop_overflow           = 0x01,
    _bgp_err_snoop_reqparity          = 0x02,
    _bgp_err_snoop_cacheparity        = 0x03,
    _bgp_err_snoop_streamparity       = 0x04,
    _bgp_err_snoop_l2loadparity       = 0x05,
    _bgp_err_snoop_dcuportparity      = 0x06,
    _bgp_err_snoop_dcrregparity       = 0x07,
    _bgp_err_snoop_tokenunderrun      = 0x08,
    _bgp_err_snoop_tokenoverrun       = 0x09,
    _bgp_err_snoop_fatalparity        = 0x0a,
    _bgp_err_snoop_unused             = 0x0b,
    _bgp_err_snoop_SRAB_parity        = 0x01, // Parity error detected when reading back an active stream register base
    _bgp_err_snoop_SRAM_parity        = 0x02, // Parity error detected when reading back an active stream register mask
    _bgp_err_snoop_SRHB_parity        = 0x03, // Parity error detected when reading back a history stream register base
    _bgp_err_snoop_SRHM_parity        = 0x04, // Parity error detected when reading back a history stream register mask
    _bgp_err_snoop_SC_parity          = 0x05, // Parity error detected when reading back a snoop cache entry
    _bgp_err_snoop_L1_inconsistency   = 0x06, // Two L1 caches contain inconsistent data for the same valid address
    _bgp_err_snoop_SR_coverage        = 0x07, // A valid L1 line was not represented in any of the stream registers
    _bgp_err_snoop_SC_coverage        = 0x08, // A valid L1 line was present in a snoop cache
    _bgp_err_snoop_max                = 0xFF

  } _BGP_RAS_Snoop_ErrCodes;

typedef enum T_BGP_RAS_L2_ErrCodes
  {
    _bgp_err_l2_none                  = 0x00,
    _bgp_err_l2_dsrd                  = 0x01,
    _bgp_err_l2_int                   = 0x02,
    _bgp_err_l2_dswr                  = 0x03,
    _bgp_err_l2_inconsistency         = 0x01, // Two L2 caches contain inconsistent data for the same valid address
    _bgp_err_l2_max                   = 0xFF
  } _BGP_RAS_L2_ErrCodes;

typedef enum T_BGP_RAS_SRAM_ErrCodes
{
    _bgp_err_sram_illegal_access = 0x00,
    _bgp_err_sram_parity_error   = 0x01,
    _bgp_err_sram_ue             = 0x02,
    _bgp_err_sram_ce_count       = 0x03,
    _bgp_err_sram_max            = 0xFF
} _BGP_RAS_SRAM_ErrCodes;


typedef enum T_BGP_RAS_CNS_ErrCodes
  {
      _bgp_err_cns_none                  = 0x00,
      _bgp_err_cns_ras_compression_flush = 0x01, // The meta-event that flushes cached RAS events.
      _bgp_err_cns_ras_storm_fatal       = 0x02, // The meta-event for escalating RAS storms to a fatal condition.
      _bgp_err_cns_ready_for_reboot      = 0x03,
      _bgp_err_cns_max                   = 0xFF
  } _BGP_RAS_CNS_ErrCodes;

typedef enum T_BGP_RAS_TestInt_ErrCodes 
{
             _bgp_err_testint_none                = 0x00,

             _bgp_err_testint_dcr_read_timeout    = 0x01, // DCR read timeout
             _bgp_err_testint_dcr_write_timeout   = 0x02, // DCR write timeout

             _bgp_err_testint_max                 = 0xFF

} _BGP_RAS_TestInt_ErrCodes;


typedef enum T_BGP_RAS_Diagnostic_ErrCodes
  {
    _bgp_err_diagnostic_none                = 0x00,
    _bgp_err_diagnostic_sw_config           = 0x01, // General Software configuration error for diagnostic test
    _bgp_err_diagnostic_sw_no_malloc        = 0x02, // Software configuration error for diagnostic test,must specify +CNKMalloc in svchost
    _bgp_err_diagnostic_sw_no_dma           = 0x03, // Software configuration error for diagnostic test,must specify +DMA in svchost   
    _bgp_err_diagnostic_sw_no_torus         = 0x04, // Software configuration error for diagnostic test,must specify +Torus in svchost  
    _bgp_err_diagnostic_sw_no_collective    = 0x06, // Software configuration error for diagnostic test,must specify +Collective in svchost
    _bgp_err_diagnostic_sw_no_globints      = 0x07, // Software configuration error for diagnostic test,must specify +GlobalInts in svchost    
    _bgp_err_diagnostic_sw_no_serdes        = 0x08, // Software configuration error for diagnostic test,must specify +SerDes in svchost 
    _bgp_err_diagnostic_sw_loopback_on      = 0x09, // Software configuration error for diagnostic test,must specify -Loopback in svchost    
    _bgp_err_diagnostic_sw_loopback_off     = 0x0A, // Software configuration error for diagnostic test,must specify +Loopback in svchost 
    _bgp_err_diagnostic_L2_L3_consistency   = 0x0B, // L2 line found to be inconsistent with L3
    _bgp_err_diagnostic_snoop_IQs_not_empty = 0x0C, // Snoop invalidate queues not empty when they were expected to be
    _bgp_err_diagnostic_trash_failure       = 0x0D, // TRASH test case miscompare
    _bgp_err_diagnostic_tnk_failure         = 0x0E, // TNK test case miscompare
    _bgp_err_diagnostic_max                 = 0xFF 
  } _BGP_RAS_Diagnostic_ErrCodes;

typedef enum T_BGP_RAS_Kernel_ErrCodes
{
   _bgp_err_kernel_none                     = 0x00,
   _bgp_err_kernel_bmw                      = 0x01, // Bad Memory Write
   _bgp_err_kernel_bmr                      = 0x02, // Bad Memory Read
   _bgp_err_kernel_align                    = 0x03, // Bad Alignment access
   _bgp_err_kernel_fpunavail                = 0x04, // Floating point operation unavailable
   _bgp_err_kernel_illinstr                 = 0x05, // Illegal Instruction
   _bgp_err_kernel_crash                    = 0x06, // Crash kernel
   _bgp_err_kernel_bir                      = 0x07, // Bad instruction read
   _bgp_err_kernel_invalid_load             = 0x08, // Invalid value in load message
   _bgp_err_kernel_invalid_start            = 0x09, // Invalid value in start message
   _bgp_err_kernel_insufficient_mem         = 0x0A, // Insufficient memory resources at application start
   _bgp_err_kernel_invalid_msg_core         = 0x0B, // Invalid core number in message header
   _bgp_err_kernel_l1drecoverydisabled      = 0x0C, // L1 dcache recovery disabled
   _bgp_err_kernel_max                      = 0xFF
} _BGP_RAS_Kernel_ErrCodes;

typedef enum T_BGP_RAS_Envmon_ErrCodes
{
   _bgp_err_envmon_none            = 0x00,
   _bgp_err_envmon_ptmoncrit       = 0x01,
   _bgp_err_envmon_ptmonwarn       = 0x02,
   _bgp_err_envmon_jitter          = 0x03,
   _bgp_err_envmon_fsmfault        = 0x04,
   _bgp_err_envmon_checksumfail    = 0x05,
   _bgp_err_envmon_mintempthresh   = 0x06,
   _bgp_err_envmon_maxtempthresh   = 0x07,
   _bgp_err_envmon_minpowerthresh  = 0x08,
   _bgp_err_envmon_maxpowerthresh  = 0x09,
   _bgp_err_envmon_powererror      = 0x0A,
   _bgp_err_envmon_tempdivider     = 0x0B,
   _bgp_err_envmon_unknown         = 0x0C,
   _bgp_err_envmon_reactivemode    = 0x0D,
   _bgp_err_envmon_proactivemode   = 0x0E,
   _bgp_err_envmon_max             = 0xff
} _BGP_RAS_Envmon_ErrCodes;

#define _BGP_RAS_DETAIL_MAX_WORDS (32)
#define _BGP_RAS_ASCII_MAX_LEN (128)  // 128 Max with a char for null termination

#ifdef __xlC__
#pragma options align=packed
#endif

//
// All detail structures will be overlayed with an array of
//  uint32_t's to simplify byteswapping
typedef union T_BGP_RAS_Detail
               {
               uint32_t words[ _BGP_RAS_DETAIL_MAX_WORDS ];
               char text[ _BGP_RAS_ASCII_MAX_LEN ];
               }
               PACKED _BGP_RAS_Detail;

//
// This structure must fit in a MailBox packet and a Tree Packet,
//  so total size is <= 240 bytes (to leave room for a Tree Pkt Header).
//
// 0) Union _BGP_RAS_Event_t based on UCI
// 1)
typedef struct T_BGP_RAS_Event
                {
                uint32_t        UCI;         // Universal Component Identifier: unique across entire machine
                uint8_t         Facility;    // High level component detecting the error
                uint8_t         Unit;        // hardware or software unit detecting or having the error
                uint8_t         ErrCode;     // error code
                uint8_t         DetailWords; // Number of Detail Words in Details
                uint64_t        TimeStamp;   // Time in Processor Cycles (pclks) the error occurred
                uint32_t        ECID[4];     // Electronic Chip ID
                _BGP_RAS_Detail Details;     // Unit+ErrCode specific details for the event (may be empty)
                }
                PACKED _BGP_RAS_Event;

typedef _BGP_RAS_Event _BGP_RAS_Event_t;



extern void _bgp_RAS_Event( _BGP_Facility facility, _BGP_RAS_Units unit, uint16_t err_code, int detail_words, ... );
extern void _bgp_RAS_Event_ASCII( _BGP_Facility facility, _BGP_RAS_Units unit, uint16_t err_code, const char *text );

#ifdef __xlC__
#pragma options align=reset
#endif

__END_DECLS



#endif // Add nothing below this line
